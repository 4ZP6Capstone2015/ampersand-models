CONTEXT DeliverySimple
{-

Compile with: 

prototype DeliverySimple.adl --css=DeliverySimple.css ..

-}

INTERFACE Overview : I[ONE]
BOX[ "Alle klanten" : V[ONE*Klant]
   , "Alle leveranciers" : V[ONE*Leverancier] 
   , "Alle producten" : V[ONE*Product]
   , "Alle bestellingen" : V[ONE*Bestelling] 
   , "Zoeken" : V[ONE*Zoek]
   ]
   
INTERFACE Klant (klantNaam, klantAdres, klantWoonplaats, bestellingOntvangen) : I[Klant]
BOX [ Naam : klantNaam
    , Straat : klantAdres
    , Woonplaats : klantWoonplaats
    , "Nog niet geaccepteerde bestellingen" : bestellingDoor~ /\ -(V; bestellingGeaccepteerd~)
    , "te ontvangen bestellingen" : bestellingDoor~ /\ (V; bestellingGeaccepteerd~) /\ -bestellingOntvangen~
    , "Ontvangen bestellingen" : bestellingOntvangen~
    ]

INTERFACE Leverancier (leverancierNaam, levert, productNaam, productPrijs, bestellingGeaccepteerd) : I[Leverancier]
BOX [ Naam : leverancierNaam
    , Producten : levert
      BOX [ Naam : productNaam
          , Prijs : productPrijs
          ]
    , "Te accepteren bestellingen" : bestellingBij~ /\ -bestellingGeaccepteerd~
    , "Geaccepteerde bestellingen" : bestellingGeaccepteerd~
    ]

INTERFACE Product (productNaam, productPrijs) : I[Product]
BOX [ Naam : productNaam
    , Prijs : productPrijs
    , Leveranciers : levert~
    ]

INTERFACE Bestelling (bestellingDoor, bestellingBij, bestellingVan) : I[Bestelling]
BOX [ Klant : bestellingDoor
    , Leverancier : bestellingBij
    , Product: bestellingVan
    ]


-- Zoeken

-- Met behulp van een singleton concept Zoek en een hulprelatie kunnen
-- we een eenvoudige zoekfaciliteit simuleren.

-- Om te zoeken: druk op Edit in de gewenste zoek interface (bv. "Zoek op naam"), 
-- voeg de zoekterm toe met Insert New, vul de term in en druk op Save.
-- NB. Na het zoeken moet de zoekterm weer verwijderd worden. 

zoek :: Zoek * Zoek
 = [ ("zoek", "zoek")
   ]

zoekOp :: Zoek * Klant

INTERFACE "Zoek klant op nr" (zoekOp) : I[Zoek]
BOX [ "Klantnr" : zoekOp 
      BOX [ Naam : klantNaam
          , Adres : klantAdres
          , Woonplaats : klantWoonplaats
          ]
    ]

zoekOpNaam :: Zoek * Naam

INTERFACE "Zoek op naam" (zoekOpNaam) : I[Zoek]
BOX [ "Gezochte Naam" : zoekOpNaam 
    , "Gevonden klanten" : zoekOpNaam ; klantNaam~
      BOX [ Naam : klantNaam
          , Adres : klantAdres
          , Woonplaats : klantWoonplaats
          ]
    , "Gevonden leveranciers" : zoekOpNaam ; leverancierNaam~
      BOX [ Naam : leverancierNaam
          , Producten : levert
            BOX [ naam : productNaam ]
          ]
    , "Gevonden producten" : zoekOpNaam ; productNaam~
      BOX [ Naam : productNaam
          , Prijs : productPrijs
          , Leveranciers : levert~
            BOX [ naam : leverancierNaam ]
         ]
    ]
  


-- Relaties en populaties
KEY Klant: Klant(Naam: klantNaam, TXT ", ", Adres: klantAdres, TXT " te ", Plaats: klantWoonplaats)

klantNaam :: Klant -> Naam PRAGMA "" "is toegekend aan" ""
PURPOSE RELATION klantNaam[Klant*Naam] IN DUTCH
{+ De voornaam van de klant. -}
POPULATION klantNaam CONTAINS
    [ ("Klant_1"      , "Martijn")
    ; ("Klant_2"      , "Stef")
    ]

klantAdres :: Klant -> Adres 
  = [ ("Klant_1"      , "Kerkstraat")
    ; ("Klant_2"      , "Dorpsstraat")
    ]
    
klantWoonplaats :: Klant -> Woonplaats 
  = [ ("Klant_1"      , "Utrecht")
    ; ("Klant_2"      , "Enschede")
    ]


KEY Leverancier: Leverancier(Naam: leverancierNaam)
    
leverancierNaam :: Leverancier -> Naam 
  = [ ("Leverancier_1", "Rubber inc.")
    ; ("Leverancier_2", "Mario's pizzas")
    ]
    
levert :: Leverancier * Product 
  = [ ("Leverancier_1", "Product_1")
    ; ("Leverancier_1", "Product_2")
    ; ("Leverancier_1", "Product_3")
    ; ("Leverancier_2", "Product_4")
    ; ("Leverancier_2", "Product_5")
    ; ("Leverancier_2", "Product_3")
    ]

KEY Product: Product(Naam: productNaam)

productNaam :: Product -> Naam
  = [ ("Product_1", "Stuiterbal")
    ; ("Product_2", "Elastiekje")
    ; ("Product_3", "Rubberen kip")
    ; ("Product_4", "Pizza Margherita")
    ; ("Product_5", "Broodje Mario")
    ]

productPrijs :: Product -> Prijs
  = [ ("Product_1", "0,50 euro")
    ; ("Product_2", "0,02 euro")
    ; ("Product_3", "6,95 euro")
    ; ("Product_4", "8,50 euro")
    ; ("Product_5", "4,50 euro")
    ]


KEY Bestelling: Bestelling( Product: bestellingVan;productNaam
                          , TXT " door "
                          , Klant: bestellingDoor;klantNaam
                          , TXT " bij "
                          , Leverancier: bestellingBij;leverancierNaam
                          )

bestellingDoor :: Bestelling -> Klant  PRAGMA "" " is besteld door " ""
PURPOSE RELATION bestellingDoor[Bestelling*Klant] IN DUTCH
{+ De klant die de bestelling gedaan heeft. -}
POPULATION bestellingDoor CONTAINS
    [ ("Bestelling_1", "Klant_2") ]
bestellingBij :: Bestelling -> Leverancier   
  = [ ("Bestelling_1", "Leverancier_1") ]
bestellingVan :: Bestelling -> Product
  = [ ("Bestelling_1", "Product_1") ]


PROCESS Bestellen

bestellingGeaccepteerd :: Bestelling * Leverancier [UNI] -- een bestelling kan nooit door meerdere leveranciers geaccepteerd zijn
--  = [ ("Bestelling_1", "Leverancier_1") ]

bestellingOntvangen :: Bestelling * Klant [UNI] -- een bestelling kan nooit door meerdere klanten ontvangen zijn
--  = [ ("Bestelling_1", "Klant_1") ]


RULE bestellingInAssortiment : bestellingVan |- bestellingBij; levert 
MEANING "Een bestelling bij een leverancier moet in het assortiment zitten"
MESSAGE "Er is bestelling van een product dat niet bij de leverancier in het assortiment zit"
VIOLATION (TXT "Product ", TGT productNaam, TXT " wordt niet geleverd door ", SRC bestellingBij;leverancierNaam)

RULE accepteerAlleenEigen : bestellingGeaccepteerd |- bestellingBij
MEANING "Iedere leverancier kan alleen eigen bestellingen accepteren"
MESSAGE "Een leverancier heeft een bestelling bij een andere leverancier geaccepteerd"

RULE allesGeaccepteerd: I |- bestellingGeaccepteerd; bestellingGeaccepteerd~ -- == TOT
MEANING "Alle bestellingen zijn geaccepteerd"
MESSAGE "Nog niet alle bestellingen zijn geaccepteerd"

RULE ontvangAlleenEigen: bestellingOntvangen |- bestellingDoor
MEANING "Een klant kan alleen eigen bestellingen ontvangen"
MESSAGE "Een klant heeft een bestelling van een andere klant ontvangen"

RULE allesOntvangen: bestellingGeaccepteerd |- bestellingOntvangen; V
MEANING "Alle geaccepteerde bestellingen zijn ontvangen"
MESSAGE "Er is een geaccepteerde bestelling die nog niet is ontvangen"

ROLE Leverancier MAINTAINS allesGeaccepteerd

ROLE Klant MAINTAINS allesOntvangen

ENDPROCESS

ENDCONTEXT