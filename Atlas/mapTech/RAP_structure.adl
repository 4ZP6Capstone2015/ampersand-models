CONTEXT RAP
PROCESS AtlasLoad
  RULE "popchanged" : inipopu = decpopu
     MESSAGE IN DUTCH REST{+<br/>You entered change(s) on the screen. You can: <br/> 1) <b>enter
more</b> change(s), or; <br/> 2) <b>undo</b> your changes <b>by
(re)loading</b> any CONTEXT into Atlas, or;<br/> 3) <a
href='index.php?interface=Validate&atom=1&role=0'>click here</a> to
<b>commit</b> the change(s) <b>and update</b> violations on your rules.-}
     VIOLATION (TXT "added or deleted pair ", TGT I, TXT " of ", TGT (inipopu \/ decpopu)~)
  RULE "parseerror" : parseerror |- -parseerror
     MESSAGE IN DUTCH REST{+<span class='errsignal'>An error was encountered in your script.</span>
No CONTEXT screen could be generated.-}
     VIOLATION (TXT "Error in source file ", SRC I, TXT " (click to edit): expecting ", TGT pe_expecting, TXT " ", TGT pe_position)
  RULE "typeerror" : typeerror |- -typeerror
     MESSAGE IN DUTCH REST{+<span class='errsignal'>A type error was encountered in your
script.</span> A CONTEXT screen was generated with concepts and relation
declarations only, which may be useful to understand and fix the errors-}
     VIOLATION (TXT "The source file: ", SRC I, TXT " (click to edit). The error message: ", TGT te_message)

  ROLE Student MAINTAINS popchanged, parseerror, typeerror
ENDPROCESS

PROCESS Student
  RULE "multviolations1" : -((I[PropertyRule]/\declaredthrough;('TOT' \/ 'SUR');declaredthrough~);rrviols)
     MESSAGE IN DUTCH REST{+<br/><br/><span class='violsignal'>A TOTal or SURjective multiplicity
rule is violated for some relation(s).</span> Add tuple(s) in the
relation(s) to correct the violation(s).-}
     VIOLATION (TXT "RULE ", SRC I, TXT " is violated by the atom ", TGT left, TXT ".")
  RULE "multviolations2" : -((I[PropertyRule]/\declaredthrough;('UNI' \/ 'INJ');declaredthrough~);rrviols)
     MESSAGE IN DUTCH REST{+<br/><br/><span class='violsignal'>A UNIvalence or INJective
multiplicity rule is violated for some relation(s).</span> Delete
tuple(s) in the relation(s) to correct the violation(s).-}
     VIOLATION (TXT "RULE ", SRC I, TXT " is violated by the tuple ", TGT I, TXT " in combination with some other tuple(s).")
  RULE "multviolations3" : -((I[PropertyRule]/\declaredthrough;'->';declaredthrough~);rrviols)
     MESSAGE IN DUTCH REST{+<br/><br/><span class='violsignal'>A UNIvalence or TOTal multiplicity
rule is violated for some relation(s).</span> Delete tuple(s) in the
relation(s) to correct the violation(s).-}
     VIOLATION (TXT "RULE ", SRC I, TXT " is violated by the tuple ", TGT I, TXT " in combination with some other tuple(s).")
  RULE "homoviolations" : -((I[PropertyRule]/\declaredthrough;('RFX' \/ 'IRF' \/ 'SYM' \/ 'ASY' \/ 'TRN' \/ 'PROP');declaredthrough~);rrviols)
     MESSAGE IN DUTCH REST{+<br/><br/><span class='violsignal'>A rule for homogeneous relation(s) is
violated.</span> Add or delete tuple(s) in the relation(s) to correct
the violation(s).-}
     VIOLATION (TXT "RULE ", SRC I, TXT " is violated by the tuple ", TGT I, TXT " in combination with some other tuple(s).")
  RULE "otherviolations" : -((-I[PropertyRule]/\I[Rule]);rrviols)
     MESSAGE IN DUTCH REST{+<br/><br/><span class='violsignal'>A business rule that involves several
relations is violated.</span> Add or delete tuple(s) in one or more of
the relation(s) to correct the violation(s).-}
     VIOLATION (TXT "RULE ", SRC I, TXT " is violated by the tuple ", TGT I, TXT " in combination with some other tuple(s).")

  ROLE Student MAINTAINS multviolations1, multviolations2, multviolations3, homoviolations, otherviolations
ENDPROCESS

PROCESS Admin
  RULE "dummy" : firstloadedwith |- firstloadedwith

  ROLE Admin MAINTAINS dummy
ENDPROCESS

PATTERN "AtlasLoad"

  firstloadedwith :: AdlFile * AdlVersion[UNI] MEANING IN ENGLISH REST{+The version of the adl compiler with which the file has been loaded for
the first time.-}
  inios :: Concept * AtomID MEANING IN ENGLISH REST{+The initial population of a concept from a rule specification file-}
  inipopu :: Declaration * PairID MEANING IN ENGLISH REST{+The initial population of a relation from a rule specification file-}
  inileft :: PairID * Atom MEANING IN ENGLISH REST{+The initial left value of a pair identifier from the initial population
of a relation from a rule specification file-}
  iniright :: PairID * Atom MEANING IN ENGLISH REST{+The initial right value of a pair identifier from the initial population
of a relation from a rule specification file-}
  parseerror :: File * ParseError[UNI] MEANING IN ENGLISH REST{+The parse error of a syntactically incorrect file-}
  pe_action :: ParseError -> String MEANING IN ENGLISH REST{+A message of what may resolve a parse error-}
  pe_position :: ParseError -> String MEANING IN ENGLISH REST{+A description of the position of the parse error-}
  pe_expecting :: ParseError -> String MEANING IN ENGLISH REST{+A message of what was expected by the parser-}
  typeerror :: File * TypeError MEANING IN ENGLISH REST{+The type error of a syntactically correct, but invalid file-}
  te_message :: TypeError * ErrorMessage[UNI] MEANING IN ENGLISH REST{+The full error message of a type error-}
  te_parent :: TypeError * TypeError[UNI] MEANING IN ENGLISH REST{+The parent type error of a nested type error-}
  te_position :: TypeError * String[UNI] MEANING IN ENGLISH REST{+A description of the position of the type error-}
  te_origtype :: TypeError * String[UNI] MEANING IN ENGLISH REST{+The type of element in which the type error has been detected-}
  te_origname :: TypeError * String[UNI] MEANING IN ENGLISH REST{+The name of the element in which the type error has been detected-}
ENDPATTERN

PATTERN "FileManagement"

  RULE "unique file location" : filename;filename~/\filepath;filepath~ |- I
     MEANING IN ENGLISH REST{+Each file has its own location on the file system.-}
  RULE "user roles" : 'Student' \/ 'StudentDesigner' \/ 'Designer' |- I[Role]
     MEANING IN ENGLISH REST{+There are three roles: Student, StudentDesigner and Designer-}

  SPEC "AdlFile" ISA "File"
  SPEC "NewAdlFile" ISA "AdlFile"
  SPEC "SavePopFile" ISA "File"
  SPEC "SaveAdlFile" ISA "AdlFile"

  filename :: File -> FileName MEANING IN ENGLISH REST{+The name of a file-}
  filepath :: File * FilePath[UNI] MEANING IN ENGLISH REST{+The path of a file-}
  filetime :: File * CalendarTime[UNI] MEANING IN ENGLISH REST{+The last time a file has been updated. In RAP this is the creation date,
because files may not be edited.-}
  uploaded :: User * File MEANING IN ENGLISH REST{+The files in RAP of a user-}
  userrole :: User * Role[UNI] MEANING IN ENGLISH REST{+The current role of a user.-}
  sourcefile :: Context -> AdlFile MEANING IN ENGLISH REST{+The main rule specification file in which a context is defined-}
  includes :: Context * File MEANING IN ENGLISH REST{+The files included by the main rule specification in which a context is
defined-}
  applyto :: G -> AdlFile MEANING IN ENGLISH REST{+The application of an Ampersand compiler function (G) to a rule
specification-}
  functionname :: G -> String MEANING IN ENGLISH REST{+The name of an Ampersand compiler function-}
  operation :: G -> Int MEANING IN ENGLISH REST{+The operation number of an Ampersand compiler function-}
  newfile :: User -> NewAdlFile MEANING IN ENGLISH REST{+A user may open a new file-}
  savepopulation :: Context -> SavePopFile MEANING IN ENGLISH REST{+The population of a context may be exported to a file to INCLUDE-}
  savecontext :: Context -> SaveAdlFile MEANING IN ENGLISH REST{+A context may be exported to a rule specification-}

  KEY File: File(PRIMHTML "<a href='../../index.php?file=", "2":filepath, "3":filename, PRIMHTML "&userrole=", "5":uploaded~;userrole, PRIMHTML "'>", "7":filename, PRIMHTML "</a>")
  KEY G: G(PRIMHTML "<a href='../../index.php?operation=", "2":operation, PRIMHTML "&file=", "4":applyto;filepath, "5":applyto;filename, PRIMHTML "&userrole=", "7":applyto;uploaded[User*AdlFile]~;userrole, PRIMHTML "'>", "9":functionname, PRIMHTML "</a>")
  KEY NewAdlFile: NewAdlFile(PRIMHTML "<a href='../../index.php'>", "2":filename[NewAdlFile*FileName], PRIMHTML "</a>")
  KEY SavePopFile: SavePopFile(PRIMHTML "<a href='../../index.php?operation=4&file=", "2":filepath[SavePopFile*FilePath], "3":filename[SavePopFile*FileName], PRIMHTML "'>", "5":filename[SavePopFile*FileName], PRIMHTML "</a>")
  KEY SaveAdlFile: SaveAdlFile(PRIMHTML "<a href='../../index.php?operation=2&file=", "2":filepath[SaveAdlFile*FilePath], "3":filename[SaveAdlFile*FileName], PRIMHTML "&userrole=", "5":savecontext~;sourcefile;uploaded[User*AdlFile]~;userrole, PRIMHTML "'>", "7":filename[SaveAdlFile*FileName], PRIMHTML "</a>")
ENDPATTERN

PATTERN "Metrics"

  countrules :: Context * Int[UNI] MEANING IN ENGLISH REST{+The number of rules in a context-}
  countdecls :: Context * Int[UNI] MEANING IN ENGLISH REST{+The number of relation declarations in a context-}
  countcpts :: Context * Int[UNI] MEANING IN ENGLISH REST{+The number of concepts in a context-}
ENDPATTERN

PATTERN "MetaInformation"

  rapdescr :: MetaInformation * Blob
  engineimage :: MetaInformation * Image
  engineexpl :: MetaInformation * Blob
  genimage :: MetaInformation * Image
  genexpl :: MetaInformation * Blob
ENDPATTERN

PATTERN "Image"

  imageurl :: Image * URL

  KEY Image: Image(PRIMHTML "<img src='", "2":imageurl, PRIMHTML "'>")
ENDPATTERN

PATTERN "Conceptual"

  ptpic :: Pattern * Image[UNI] MEANING IN ENGLISH REST{+A conceptual diagram for a pattern-}
  cptpic :: Concept * Image[UNI] MEANING IN ENGLISH REST{+A conceptual diagram for a concept-}
  rrpic :: Rule * Image[UNI] MEANING IN ENGLISH REST{+A conceptual diagram for a rule-}
ENDPATTERN

PATTERN "RuleEnforcement"

  SPEC "Violation" ISA "PairID"

  rrviols :: Rule * Violation MEANING IN ENGLISH REST{+The violations of a rule-}
ENDPATTERN

PATTERN "Misc"

  decexample :: Declaration * PragmaSentence MEANING IN DUTCH REST{+An example sentence using the pragma of a relation declaration.-}
ENDPATTERN

PATTERN "Context"

  ctxnm :: Context -> Conid[INJ] MEANING IN ENGLISH REST{+The name of a context-}
  ctxpats :: Context * Pattern MEANING IN ENGLISH REST{+The patterns in a context-}
  ctxcs :: Context * Concept MEANING IN ENGLISH REST{+The concept definitions in a context, including those from patterns and
processes-}

  KEY Context: Context("1":ctxnm)
ENDPATTERN

PATTERN "Pattern"

  ptnm :: Pattern -> Conid[INJ] MEANING IN ENGLISH REST{+The name of a pattern-}
  ptrls :: Pattern * Rule MEANING IN ENGLISH REST{+The user-defined rules in a pattern-}
  ptgns :: Pattern * Gen MEANING IN ENGLISH REST{+The user-defined generalization rules in a pattern-}
  ptdcs :: Pattern * Declaration MEANING IN ENGLISH REST{+The relation declarations in a pattern-}
  ptxps :: Pattern * Purpose MEANING IN ENGLISH REST{+The purposes of a pattern-}

  KEY Pattern: Pattern("1":ptnm)
ENDPATTERN

PATTERN "Gen"

  RULE "eq gen" : gengen;gengen~/\genspc;genspc~ |- I
     MEANING IN ENGLISH REST{+Two generalization rules are identical when the specific concepts are
identical and the generic concepts are identical.-}

  gengen :: Gen -> Concept MEANING IN ENGLISH REST{+A generalization rule refers to a more generic concept.-}
  genspc :: Gen -> Concept MEANING IN ENGLISH REST{+A generalization rule refers to a more specific concept.-}

  KEY Gen: Gen(TXT "SPEC ", "2":genspc;cptnm, TXT " ISA ", "4":gengen;cptnm)
ENDPATTERN

PATTERN "Concept"

  RULE "order" : order~;genspc~;gengen;order |- I
     MEANING IN ENGLISH REST{+Is-a-related concepts are in the same order.-}
  RULE "referential integrity" : src~;decsgn~;decpopu;left \/ trg~;decsgn~;decpopu;right |- order;order~;cptos
     MEANING IN ENGLISH REST{+Every atom in the domain or codomain of a relation is an instance of a
concept from the same order as the source respectively the target of
that relation.-}
     MESSAGE IN DUTCH REST{+If an atom is in some tuple of a relation, then that atom must exist in
the concept that is the source respectively target of that relation.
Deletion of an atom from a concept is not permitted if that atom is
still present in some tuple of some relation. Nor is addition of a tuple
permitted if the source or target atom is not present in the related
concept. It is a violation of <b>Referential integrity</b> rule for a
relation.-}
     VIOLATION (TXT "The tuple ", SRC I, TXT " refers to a source or target atom that does not exist.")
  RULE "entity integrity concept" : atomvalue;atomvalue~/\cptos~;order;order~;cptos |- I
     MEANING IN ENGLISH REST{+Every atom of a concept has a unique value within the order of that
concept.-}
     MESSAGE IN DUTCH REST{+Every atom of a concept is unique, or, no two atoms in the population of
a concept have the same name. Addition of a duplicate atom is not
permitted. It is a violation of the <b>Entity integrity</b> rule for
this concept. Please refer to book <i>Rule Based Design</i>, page 43 and
52, <i>entity integrity</i>.-}
     VIOLATION (TXT "An atom with name ", SRC I, TXT " already exists.")

  cptnm :: Concept -> Conid[INJ] MEANING IN ENGLISH REST{+The name of a concept-}
  cptos :: Concept * AtomID MEANING IN ENGLISH REST{+The population of a concept-}
  cptdf :: Concept * Meaning MEANING IN ENGLISH REST{+The definitions of a concept-}
  cptpurpose :: Concept * Purpose MEANING IN ENGLISH REST{+The purposes of a concept-}
  ordername :: Order -> String[INJ] MEANING IN ENGLISH REST{+The name of an order-}
  order :: Concept -> Order MEANING IN ENGLISH REST{+Every concept is in an order.-}
  atomvalue :: AtomID -> Atom MEANING IN ENGLISH REST{+The value of an atomic term-}

  KEY Concept: Concept("1":cptnm)
  KEY Order: Order("1":ordername)
  KEY AtomID: AtomID("1":atomvalue, TXT " :: ", "3":cptos~;order;ordername)
ENDPATTERN

PATTERN "Sign"

  src :: Sign -> Concept MEANING IN ENGLISH REST{+The source of a sign-}
  trg :: Sign -> Concept MEANING IN ENGLISH REST{+The target of a sign-}
  left :: PairID -> AtomID MEANING IN ENGLISH REST{+The left atomic term of a pairID-}
  right :: PairID -> AtomID MEANING IN ENGLISH REST{+The right atomic term of a pairID-}

  KEY Sign: Sign("1":src;cptnm, TXT " * ", "3":trg;cptnm)
  KEY PairID: PairID("1":left;atomvalue, TXT " * ", "3":right;atomvalue)
ENDPATTERN

PATTERN "Declaration"

  RULE "eq declaration" : decnm;decnm~/\decsgn;src;(decsgn;src)~/\decsgn;trg;(decsgn;trg)~ |- I
     MEANING IN ENGLISH REST{+The unique signature of a declaration consists of a relation name, a
source concept, and a target concept.-}
  RULE "property enum" : I[Property] |- '->' \/ 'UNI' \/ 'TOT' \/ 'INJ' \/ 'SUR' \/ 'RFX' \/ 'IRF' \/ 'SYM' \/ 'ASY' \/ 'TRN' \/ 'PROP'
  RULE "entity integrity of relation" : left;left~/\right;right~/\decpopu~;decpopu |- I
     MEANING IN ENGLISH REST{+At most one of the pair identifiers with the same left and right may
exist in the population of a relation declarion.-}
     MESSAGE IN DUTCH REST{+Every tuple in a relation is unique, or, no two tuples in the population
of a relation may have the same source and target atoms. Addition of a
duplicate tuple is not permitted. It is a violation of the <b>Entity
integrity</b> rule for this relation.-}
     VIOLATION (TXT "A tuple with the same source and target atoms ", SRC I, TXT " already exists.")
  RULE "typed domain" : decpopu;left;cptos~;order |- decsgn;src;order
     MEANING IN ENGLISH REST{+The type of the elements in the domain of a declaration is of the same
order as the source of that relation.-}
     MESSAGE IN DUTCH REST{+You try to add a tuple with a source atom, that is not in the population
of the source of the relation. This is a violation of the type of the
tuple. TIP: enter text in the left input field to get a shorter pick
list. Note on ISA-relations: You can make an atom more specific by
moving it to the population of a more specific concept.-}
     VIOLATION (TXT "Source atom ", TGT I, TXT " is not in the population of ", SRC decsgn;src)
  RULE "typed codomain" : decpopu;right;cptos~;order |- decsgn;trg;order
     MEANING IN ENGLISH REST{+The type of the elements in the codomain of a declaration is of the same
order as the target of that relation.-}
     MESSAGE IN DUTCH REST{+You try to add a tuple with a target atom, that is not in the population
of the target of the relation. This is a violation of the type of the
tuple. TIP: enter text in the right input field to get a shorter pick
list. Note on ISA-relations: You can make an atom more specific by
moving it to the population of a more specific concept.-}
     VIOLATION (TXT "Target atom ", TGT I, TXT " is not in the population of ", SRC decsgn;trg)

  SPEC "PropertyRule" ISA "Rule"

  decnm :: Declaration -> Varid MEANING IN ENGLISH REST{+The unqualified name of a declaration-}
  decsgn :: Declaration -> Sign MEANING IN ENGLISH REST{+The sign of a declaration-}
  decprps :: Declaration * PropertyRule[INJ] MEANING IN ENGLISH REST{+The properties of a relation-}
  declaredthrough :: PropertyRule * Property[TOT] MEANING IN ENGLISH REST{+A property rule is defined on a declaration by the user or calculated by
the Ampersand compiler-}
  decprL :: Declaration * String[UNI] MEANING IN ENGLISH REST{+The prefix of the pragma of a declaration-}
  decprM :: Declaration * String[UNI] MEANING IN ENGLISH REST{+The infix of the pragma of a declaration-}
  decprR :: Declaration * String[UNI] MEANING IN ENGLISH REST{+The suffix of the pragma of a declaration-}
  decmean :: Declaration * Meaning MEANING IN ENGLISH REST{+The meanings of a declaration-}
  decpurpose :: Declaration * Purpose MEANING IN ENGLISH REST{+The purposes of a declaration-}
  decpopu :: Declaration * PairID MEANING IN ENGLISH REST{+The population of a declaration-}

  KEY Declaration: Declaration("1":decnm, TXT " :: ", "3":decsgn;src;cptnm, TXT " * ", "5":decsgn;trg;cptnm)
ENDPATTERN

PATTERN "Expression"

  RULE "rel name is decl name" : relnm = reldcl;decnm
     MEANING IN ENGLISH REST{+The unqualified names of a relation and its declaration are the same.-}

  exprvalue :: ExpressionID -> Expression MEANING IN ENGLISH REST{+The value of an expression identifier-}
  rels :: ExpressionID * Relation MEANING IN ENGLISH REST{+The user-declared relations in an expression-}
  relnm :: Relation -> Varid MEANING IN ENGLISH REST{+The unqualified name of a relation-}
  relsgn :: Relation -> Sign MEANING IN ENGLISH REST{+The sign of a relation-}
  reldcl :: Relation -> Declaration MEANING IN ENGLISH REST{+A relation is declared.-}

  KEY ExpressionID: ExpressionID("1":exprvalue)
  KEY Relation: Relation("1":relnm, TXT "[", "3":relsgn;src;cptnm, TXT "*", "5":relsgn;trg;cptnm, TXT "]")
ENDPATTERN

PATTERN "Rule"

  rrnm :: Rule -> ADLid[INJ] MEANING IN ENGLISH REST{+The name of a rule-}
  rrexp :: Rule -> ExpressionID MEANING IN ENGLISH REST{+The rule assertion-}
  rrmean :: Rule * Meaning MEANING IN ENGLISH REST{+The meanings of a rule-}
  rrpurpose :: Rule * Purpose MEANING IN ENGLISH REST{+The purposes of a rule-}

  KEY Rule: Rule("1":rrnm)
ENDPATTERN

POPULATION rapdescr[MetaInformation*Blob] CONTAINS
   [ 'MetaInformation_RAP' * '<p>This application is the second version of the Repository for Ampersand Projects (RAP). You can load your CONTEXT files into RAP. After loading a CONTEXT file you can view its contents - including deriviations like conceptual diagrams and violations - through a web interface called Atlas. You can also run your CONTEXT as a rule based process as explained in section 2.4 Control Principle of Rule Based Design by Joosten et. al. And you can generate design artifacts from CONTEXT files as an activity of the rule based design process introduced in section 2.7 Consequences of Rule Based Design by Joosten et. al.</p></br><p>Chapter 8 of Rule Based Design by Joosten et. al. presents RAP as a practical example of an application of the rule based design process ánd of a system implementing the rule based process. This chapter describes how RAP is specified as and generated from a CONTEXT with rules about CONTEXTs. In further explanations we refer to the RULEs of the meta CONTEXT <i>RAP</i> by the term <i>RAP rules</i></p>'   ]

POPULATION engineimage[MetaInformation*Image] CONTAINS
   [ 'MetaInformation_rulebasedEngineCycle' * 'RulebasedEngineCycle.png'
   , 'MetaInformation_rulebasedEngineCycle' * 'RulebasedBPM.png'   ]

POPULATION engineexpl[MetaInformation*Blob] CONTAINS
   [ 'MetaInformation_rulebasedEngineCycle' * 'Rule based process management is explained in section 2.4 Control Principle of Rule Based Design by Joosten et. al. The image of the rule engine visualizes Shewhart`s Plan-Do-Check-Act cycle on which the control principe is based. An engine cycle maps to a Plan-Do-Check-Act cycle as <i>determine action &rarr; act &rarr; observe events &rarr; signal violations</i>.<br/><p>The image of the control principle contains two actors, the employee and the rule owner. As a user of RAP you play both roles and you distribute the violations between those roles. The employee role controls the engine cycles through the Atlas. Atlas is the user interface in RAP. The rule owner role is still played mostly outside of RAP by editing CONTEXT files and loading the rules into the Rule Base and the populations into <i>the systems</i></p><p><b>Plan: Determine appropriate actions for the employee or rule owner role to resolve violations.</b> Violations will be visible through a yellow box <i>Signals for Student</i>. This box contains violations of RULEs from your CONTEXT ánd violations of deferred enforced RAP rules.</p><p><b>Do: As an employee, change the populations of relations and concepts through <i>Atlas (Plan - Do)</i>.</b> RULEs from your CONTEXT are checked and acted upon ONLY when you <i>Click on the next version to autocomplete the rule engine cycle (Check and Act)</i>, which is the sign for the computer that you have finished the Do-step. RAP rules however are checked and acted upon each time you hit a Save-button i.e. the <i>Signals for Student</i> may change for deferred enforced RAP rules or a red box may appear for violations of immediately enforced RAP rules.</p><p><b>Do: As a rule owner, change the design by editing a CONTEXT file and load the new version into RAP.</b> You can edit files on your file system with your editor and upload, or you can edit CONTEXTs in the textarea and save.</p><p><b>Check: As an employee, <i>Click on the next version to autocomplete the rule engine cycle (Check and Act)</i>. Your changes in the populations will be valuated yielding an updated set of violations of your RULEs.</b> The changed POPULATION is stored in a new version of your CONTEXT where the RULEs have not changed. This new file becomes accessable in <i>CONTEXT files (Design / reload)</i>.</p><p><b>Check: As a rule owner, you have uploaded or saved a new version of a CONTEXT file. First the file is parsed and types of RULEs are checked. Next the POPULATION in the file is checked against the new rules.</b> Note that the previously loaded CONTEXT in RAP is overwritten and changes in the POPULATION will be lost. You can save those changes through <i>Atlas (Check - Act)</i> or through <i>Export Atlas</i>. An export of Atlas results in a .pop-file containing only POPULATIONs. You can copy the content of the .pop file into a compatible CONTEXT or you can use a <i>INCLUDE "filename.pop"</i>-statement after the <i>CONTEXT Contextname</i>-statement.</p><p><b>Act: The new version is loaded into the Atlas and the updated set of violations will be visible in the yellow box, ready to be resolved by you.</b> </p>'   ]

POPULATION genimage[MetaInformation*Image] CONTAINS
   [ 'MetaInformation_generators' * 'generators.png'   ]

POPULATION genexpl[MetaInformation*Blob] CONTAINS
   [ 'MetaInformation_generators' * 'no explanation yet'   ]

POPULATION imageurl[Image*URL] CONTAINS
   [ 'RulebasedEngineCycle.png' * 'images/RulebasedEngineCycle.png'
   , 'RulebasedBPM.png' * 'images/RulebasedBPM.png'
   , 'generators.png' * 'images/generators.png'   ]

POPULATION Role CONTAINS
   [ 'Designer'
   , 'StudentDesigner'
   , 'Student'   ]

POPULATION MetaInformation CONTAINS
   [ 'MetaInformation_RAP'
   , 'MetaInformation_rulebasedEngineCycle'
   , 'MetaInformation_generators'   ]

POPULATION Blob CONTAINS
   [ '<p>This application is the second version of the Repository for Ampersand Projects (RAP). You can load your CONTEXT files into RAP. After loading a CONTEXT file you can view its contents - including deriviations like conceptual diagrams and violations - through a web interface called Atlas. You can also run your CONTEXT as a rule based process as explained in section 2.4 Control Principle of Rule Based Design by Joosten et. al. And you can generate design artifacts from CONTEXT files as an activity of the rule based design process introduced in section 2.7 Consequences of Rule Based Design by Joosten et. al.</p></br><p>Chapter 8 of Rule Based Design by Joosten et. al. presents RAP as a practical example of an application of the rule based design process ánd of a system implementing the rule based process. This chapter describes how RAP is specified as and generated from a CONTEXT with rules about CONTEXTs. In further explanations we refer to the RULEs of the meta CONTEXT <i>RAP</i> by the term <i>RAP rules</i></p>'
   , 'Rule based process management is explained in section 2.4 Control Principle of Rule Based Design by Joosten et. al. The image of the rule engine visualizes Shewhart`s Plan-Do-Check-Act cycle on which the control principe is based. An engine cycle maps to a Plan-Do-Check-Act cycle as <i>determine action &rarr; act &rarr; observe events &rarr; signal violations</i>.<br/><p>The image of the control principle contains two actors, the employee and the rule owner. As a user of RAP you play both roles and you distribute the violations between those roles. The employee role controls the engine cycles through the Atlas. Atlas is the user interface in RAP. The rule owner role is still played mostly outside of RAP by editing CONTEXT files and loading the rules into the Rule Base and the populations into <i>the systems</i></p><p><b>Plan: Determine appropriate actions for the employee or rule owner role to resolve violations.</b> Violations will be visible through a yellow box <i>Signals for Student</i>. This box contains violations of RULEs from your CONTEXT ánd violations of deferred enforced RAP rules.</p><p><b>Do: As an employee, change the populations of relations and concepts through <i>Atlas (Plan - Do)</i>.</b> RULEs from your CONTEXT are checked and acted upon ONLY when you <i>Click on the next version to autocomplete the rule engine cycle (Check and Act)</i>, which is the sign for the computer that you have finished the Do-step. RAP rules however are checked and acted upon each time you hit a Save-button i.e. the <i>Signals for Student</i> may change for deferred enforced RAP rules or a red box may appear for violations of immediately enforced RAP rules.</p><p><b>Do: As a rule owner, change the design by editing a CONTEXT file and load the new version into RAP.</b> You can edit files on your file system with your editor and upload, or you can edit CONTEXTs in the textarea and save.</p><p><b>Check: As an employee, <i>Click on the next version to autocomplete the rule engine cycle (Check and Act)</i>. Your changes in the populations will be valuated yielding an updated set of violations of your RULEs.</b> The changed POPULATION is stored in a new version of your CONTEXT where the RULEs have not changed. This new file becomes accessable in <i>CONTEXT files (Design / reload)</i>.</p><p><b>Check: As a rule owner, you have uploaded or saved a new version of a CONTEXT file. First the file is parsed and types of RULEs are checked. Next the POPULATION in the file is checked against the new rules.</b> Note that the previously loaded CONTEXT in RAP is overwritten and changes in the POPULATION will be lost. You can save those changes through <i>Atlas (Check - Act)</i> or through <i>Export Atlas</i>. An export of Atlas results in a .pop-file containing only POPULATIONs. You can copy the content of the .pop file into a compatible CONTEXT or you can use a <i>INCLUDE "filename.pop"</i>-statement after the <i>CONTEXT Contextname</i>-statement.</p><p><b>Act: The new version is loaded into the Atlas and the updated set of violations will be visible in the yellow box, ready to be resolved by you.</b> </p>'
   , 'no explanation yet'   ]

POPULATION Image CONTAINS
   [ 'RulebasedEngineCycle.png'
   , 'RulebasedBPM.png'
   , 'generators.png'   ]

POPULATION URL CONTAINS
   [ 'images/RulebasedEngineCycle.png'
   , 'images/RulebasedBPM.png'
   , 'images/generators.png'   ]

POPULATION Property CONTAINS
   [ 'PROP'
   , 'TRN'
   , 'ASY'
   , 'SYM'
   , 'IRF'
   , 'RFX'
   , 'SUR'
   , 'INJ'
   , 'TOT'
   , 'UNI'
   , '->'   ]


ENDCONTEXT