CONTEXT RAP
PURPOSE CONTEXT "RAP" IN ENGLISH LATEX {+-}

PURPOSE PROCESS "AtlasLoad" IN ENGLISH LATEX {+-}
PURPOSE RULE "popchanged" IN ENGLISH LATEX {+-}
PURPOSE RULE "parseerror" IN ENGLISH LATEX {+-}
PURPOSE RULE "typeerror" IN ENGLISH LATEX {+-}

PURPOSE PROCESS "Student" IN ENGLISH LATEX {+-}
PURPOSE RULE "multviolations1" IN ENGLISH LATEX {+-}
PURPOSE RULE "multviolations2" IN ENGLISH LATEX {+-}
PURPOSE RULE "multviolations3" IN ENGLISH LATEX {+-}
PURPOSE RULE "homoviolations" IN ENGLISH LATEX {+-}
PURPOSE RULE "otherviolations" IN ENGLISH LATEX {+-}

PURPOSE PATTERN "AtlasLoad" IN ENGLISH LATEX {+-}
PURPOSE RELATION first_loaded_with IN ENGLISH LATEX {+-}
PURPOSE RELATION ini_os IN ENGLISH LATEX {+-}
PURPOSE RELATION ini_elem IN ENGLISH LATEX {+-}
PURPOSE RELATION ini_source IN ENGLISH LATEX {+-}
PURPOSE RELATION ini_target IN ENGLISH LATEX {+-}
PURPOSE RELATION yields_parse_error IN ENGLISH LATEX {+-}
PURPOSE RELATION possible_action IN ENGLISH LATEX {+-}
PURPOSE RELATION at_position IN ENGLISH LATEX {+-}
PURPOSE RELATION expected IN ENGLISH LATEX {+-}
PURPOSE RELATION yields_type_error IN ENGLISH LATEX {+-}
PURPOSE RELATION message IN ENGLISH LATEX {+-}
PURPOSE RELATION te_parent IN ENGLISH LATEX {+-}
PURPOSE RELATION te_position IN ENGLISH LATEX {+-}
PURPOSE RELATION te_origtype IN ENGLISH LATEX {+-}
PURPOSE RELATION te_origname IN ENGLISH LATEX {+-}

PURPOSE PATTERN "FileManagement" IN ENGLISH LATEX {+-}
PURPOSE RULE "unique file location" IN ENGLISH LATEX {+-}
PURPOSE RULE "user roles" IN ENGLISH LATEX {+-}
PURPOSE RELATION name[File * FileName] IN ENGLISH LATEX {+-}
PURPOSE RELATION path IN ENGLISH LATEX {+-}
PURPOSE RELATION is_created_at IN ENGLISH LATEX {+-}
PURPOSE RELATION has_uploaded IN ENGLISH LATEX {+-}
PURPOSE RELATION is_active_as IN ENGLISH LATEX {+-}
PURPOSE RELATION from_source IN ENGLISH LATEX {+-}
PURPOSE RELATION includes IN ENGLISH LATEX {+-}
PURPOSE RELATION function_parameter IN ENGLISH LATEX {+-}
PURPOSE RELATION function_description IN ENGLISH LATEX {+-}
PURPOSE RELATION function_id IN ENGLISH LATEX {+-}
PURPOSE RELATION may_open_new IN ENGLISH LATEX {+-}
PURPOSE RELATION may_be_exported_to IN ENGLISH LATEX {+-}
PURPOSE RELATION may_be_saved_as  IN ENGLISH LATEX {+-}

PURPOSE PATTERN "Metrics" IN ENGLISH LATEX {+-}
PURPOSE RELATION count_rules IN ENGLISH LATEX {+-}
PURPOSE RELATION count_relations IN ENGLISH LATEX {+-}
PURPOSE RELATION count_concepts  IN ENGLISH LATEX {+-}

PURPOSE PATTERN "Image" IN ENGLISH LATEX {+-}
PURPOSE RELATION url IN ENGLISH LATEX {+-}

PURPOSE PATTERN "Conceptual" IN ENGLISH LATEX {+-}
PURPOSE RELATION concept_diagram[Pattern * Image] IN ENGLISH LATEX {+-}
PURPOSE RELATION concept_diagram[Concept * Image] IN ENGLISH LATEX {+-}
PURPOSE RELATION concept_diagram[Rule * Image] IN ENGLISH LATEX {+-}

PURPOSE PATTERN "RuleEnforcement" IN ENGLISH LATEX {+-}
PURPOSE RELATION does_not_hold_because_of IN ENGLISH LATEX {+-}

PURPOSE PATTERN "Misc" IN ENGLISH LATEX {+-}
PURPOSE RELATION example IN ENGLISH LATEX {+-}

PURPOSE PATTERN "Context" IN ENGLISH LATEX {+ An Ampersand rule specification assumes a closed world, which is called the context. This means that everything in the context is true; the rest is not. As such, a context serves as a container in which a designer defines all terms, facts and rules including their attributes. -}
PURPOSE RELATION name[Context * ContextName] IN ENGLISH LATEX {+ A context requires a human-friendly name to refer to that context. The context name is trivial within a context. -}
PURPOSE RELATION contains IN ENGLISH LATEX {+ The declarations of relations and definitions of rules are placed in subcontainers of a context, called patterns. For the purpose of reuse, a pattern might be included in multiple contexts. However in practice, a pattern cannot be included by reference. There is no objection against a pattern without any context or a context without any pattern. -}
PURPOSE RELATION declares[Context * Concept] IN ENGLISH LATEX {+ A term needs to be declared to exist in a closed world. A term is declared in a context when mentioned anywhere in that context. A term is a concept or an instance of a concept. Thus, a concept needs to declared in a context to exist in that context. -}

PURPOSE PATTERN "Pattern" IN ENGLISH LATEX {+ A pattern serves as a container for the declaration of relations and definitions of rules including their attributes. In practice, a pattern is mainly used as an intuitive container to divide a context syntactically. Ideas exist to let a pattern be a self-contained context, which can be included within a larger context. The exact purpose of a pattern is still under investigation.  -}
PURPOSE RELATION name[Pattern * PatternName] IN ENGLISH LATEX {+ A pattern requires a human-friendly name to identify that pattern within a context. -}
PURPOSE RELATION defines[Pattern * Rule] IN ENGLISH LATEX {+ A pattern is designed to contain definitions of rules. -}
PURPOSE RELATION defines[Pattern * GeneralizationRule] IN ENGLISH LATEX {+ A pattern is designed to contain definitions of generalization rules. -}
PURPOSE RELATION declares[Pattern * Relation] IN ENGLISH LATEX {+ A pattern is designed to contain declarations of relations. -}
PURPOSE RELATION purpose[Pattern * Purpose] IN ENGLISH LATEX {+ A rule designer may have reasons to define a pattern. Documenting those purposes serves traceability of the design process and understanding of that pattern. -}

PURPOSE PATTERN "Gen" IN ENGLISH LATEX {+ Special rule statements exist to define the is-a-relation between concepts in an Ampersand rule specification. Each such statement defines a generalization rule posing that a concept is more specific than a more generic concept. Thus, each generalization rule implies an is-a-relationship between two concepts. The is-a-relation is reflexive, transitive and antisymmetric. The rule designer may define a minimal set of generalization rules. A rule specification must be interpreted such that the reflexive transitive closure of the set of generalization rules represents the is-a-relation. -}
PURPOSE RULE "eq gen" IN ENGLISH LATEX {+ Duplicate definitions of generalization rules are redundant. A rule, expressing when two generalization rules are identical, prevents duplicates. -}
PURPOSE RELATION generic IN ENGLISH LATEX {+ A generalization rule requires a more generic concept to be meaningful. -}
PURPOSE RELATION specific IN ENGLISH LATEX {+ A generalization rule requires a more specific concept to be meaningful. -}

PURPOSE PATTERN "Concept" IN ENGLISH LATEX {+ Abstract terms, called concepts, exist to define heterogeneous relations between them. Ampersand is designed on a heterogeneous relation algebra instead of a homogeneous one, because ... Concepts - and the relations between them - need to be understood as elements of their class [JAAP]. Concepts are of the same class when they are related over is-a-relationships. A concept represents a set of atomic terms, called atoms. An atom is said to exist as a concept, only if that atom is an instance of that concept or a more specific concept [interpretation function, JAAP?]. Thus, concepts represent the existence and non-existence of things in the modelled context. -}
PURPOSE RULE "order" IN ENGLISH LATEX {+ An is-a-class is designed to be a set of concepts, where every two concepts are is-a-related in a way. -}
PURPOSE RULE "referential integrity" IN ENGLISH LATEX {+ The interpretation of heterogeneous relations requires that every atom, used in instances of those relations, exists [GERARD, interpretation function]. -}
PURPOSE RULE "entity integrity concept" IN ENGLISH LATEX {+ The human-friendly value of an atom must be chosen such that it does not conflict with other values of atoms within an is-a-class c.q. atoms must have a unique value within a class. -}
PURPOSE RELATION name[Concept * ConceptName] IN ENGLISH LATEX {+ A concept requires a human-friendly name to identify that concept within a context. -}
PURPOSE RELATION elem[Concept * Atom] IN ENGLISH LATEX {+ A concept represents a set of atoms, where each atom is said to be that concept. This instance-of-relation between concepts and atoms enables the definition of relationships between atoms as instances of heterogeneous relations on concepts. -}
PURPOSE RELATION def[Concept * Meaning] IN ENGLISH LATEX {+ The meaning of a concept can be defined. The meaning is required for a human to determine whether an atom should be an instance of a concept or not. The meaning of an atom should be known by that human. Note that the computer can only determine the interpretation of a rule specification.. -}
PURPOSE RELATION purpose[Concept * Purpose] IN ENGLISH LATEX {+ The reason why a concept exists can be documented for the sake of traceability and understanding of a rule specification. -}
PURPOSE RELATION name[IsAClass * ClassName] IN ENGLISH LATEX {+ A class of concepts requires a human-friendly name to identify that class within a context. -}
PURPOSE RELATION belongs_to IN ENGLISH LATEX {+ A concept needs to be understood as an element of the class to which it belongs. -}
PURPOSE RELATION value[Atom * AtomValue] IN ENGLISH LATEX {+ An atomic term requires a human-friendly value to refer to that term. -}

PURPOSE PATTERN "Sign" IN ENGLISH LATEX {+ The source and target of relation expressions and relationships are required for their interpretation [GERARD, interpretation function]. -}
PURPOSE RELATION src[Sign * Concept] IN ENGLISH LATEX {+ The sign of a relation requires a source concept to be meaningful. -}
PURPOSE RELATION trg[Sign * Concept] IN ENGLISH LATEX {+ The sign of a relation requires a target concept to be meaningful. -}
PURPOSE RELATION src[Relationship * Atom] IN ENGLISH LATEX {+ A relationship requires a source atom to be meaningful. -}
PURPOSE RELATION trg[Relationship * Atom] IN ENGLISH LATEX {+ A relationship requires a target atom to be meaningful. -}

PURPOSE PATTERN "Declaration" IN ENGLISH LATEX {+ A rule designer defines a language by declaring basic relations. All basic relations are these user-declared relations, an identity relation for each concept and atom, and a universal relation for each pair of concepts. Only basic relations may be used in the formal language e.g. the relation algebraic expression of a rule. From this language perspective, the basic relations are atomic terms of the language. A basic relation can be given a pragma, which shows how it may be used in the natural language. Only the user-declared relations have a user-defined population. From this population perspective, the user-declared relations are containers to administer facts from the modelled context i.e. relationships. -}
PURPOSE RULE "eq declaration" IN ENGLISH LATEX {+ A relation can be identified within a context by its human-friendly name, its source and its target. -}
PURPOSE RULE "property enum" IN ENGLISH LATEX {+ Only a predefined set of properties of a relation can be defined within the declaration of that relation. -}
PURPOSE RULE "entity integrity of relation" IN ENGLISH LATEX {+ A relationship can be identified by its source, its target, and the relation of which it is an instance. This means that two relationships in a relation cannot have the same source, and same target. -}
PURPOSE RULE "typed domain" IN ENGLISH LATEX {+ To be meaningful, the source of a relationship in a relation must be of the same order as the source of that relation. -}
PURPOSE RULE "typed codomain" IN ENGLISH LATEX {+ To be meaningful, the target of a relationship in a relation must be of the same order as the target of that relation.-}
PURPOSE RELATION name[Relation * RelationName] IN ENGLISH LATEX {+ A relation requires a human-friendly name to refer to that relation. -}
PURPOSE RELATION sign[Relation * Sign] IN ENGLISH LATEX {+ A relation requires a sign to be meaningful. -}
PURPOSE RELATION declares[Relation * Property] IN ENGLISH LATEX {+ Properties of a relation can be defined within the declaration of that relation, which makes such a property a property rule. -}
PURPOSE RELATION through IN ENGLISH LATEX {+ A rule is a property rule only when it is defined as part of the declaration of a relation. Thus, a rule with the meaning of a property of a relation is not necessarily a property rule. -}
PURPOSE RELATION pragma_prefix IN ENGLISH LATEX {+ A relation may be declared with a pragma to illustrate the meaning of that relation by example. A pragma is a template of a sentence on a relationship: pragma_infix src pragma_infix trg pragma_suffix. -}
PURPOSE RELATION pragma_infix IN ENGLISH LATEX {+ A relation may be declared with a pragma to illustrate the meaning of that relation by example. A pragma is a template of a sentence on a relationship: pragma_infix src pragma_infix trg pragma_suffix. -}
PURPOSE RELATION pragma_suffix IN ENGLISH LATEX {+ A relation may be declared with a pragma to illustrate the meaning of that relation by example. A pragma is a template of a sentence on a relationship: pragma_infix src pragma_infix trg pragma_suffix. -}
PURPOSE RELATION def[Relation * Meaning] IN ENGLISH LATEX {+ The meaning of a relation can be declared. The meaning is required for a human to determine whether a relationship should be an instance of a relation or not. Note that the computer can only determine the interpretation of a rule specification. -}
PURPOSE RELATION purpose[Relation * Purpose] IN ENGLISH LATEX {+ The reason why a relation exists can be documented for the sake of traceability and understanding of a rule specification. -}
PURPOSE RELATION elem[Relation * Relationship] IN ENGLISH LATEX {+ A relation represents a set of relationships. Each relationship of a relation is said to be true for that relation, and all other relationships are not.  -}

PURPOSE PATTERN "Expression" IN ENGLISH LATEX {+ In essence, a rule specification is expressed in a relation algebra on user-declared relation terms. -}
PURPOSE RULE "rel name is decl name" IN ENGLISH LATEX {+ The name of a relation is used as a token representing a relation in an expression. -}
PURPOSE RELATION value[Expression * ASCIIString] IN ENGLISH LATEX {+ An expression requires an ASCII representation for interaction with humans. -}
PURPOSE RELATION uses IN ENGLISH LATEX {+ By design, an expression consists of relation tokens combined with relation algebraic operators. -}
PURPOSE RELATION token IN ENGLISH LATEX {+ From a language perspective, the name of a relation is used as a token within an expression to refer to that relation. -}
PURPOSE RELATION sign[RelationToken * Sign] IN ENGLISH LATEX {+ A type directive may be put on a relation token for two reasons. The first reason is to disambiguate an expression, while a relation token may not always identify a relation within a context. The second reason is to cast a relation to a more specific or more generic source or target than declared. -}
PURPOSE RELATION ref IN ENGLISH LATEX {+ Every relation token in an expression must refer to a relation. -}

PURPOSE PATTERN "Rule" IN ENGLISH LATEX {+ A rule in a context must hold i.e. be true. Thus, a rule is a constraint on a context. By design, a rule is an relation algebraic expression - a relation with a sign -, which is true when it is an equivalent of the equally signed universal relation. -}
PURPOSE RELATION name[Rule * RuleName] IN ENGLISH LATEX {+ A rule requires a human-friendly name to refer to that rule. -}
PURPOSE RELATION as IN ENGLISH LATEX {+ By design, a rule is formally expressed in relation algebra. -}
PURPOSE RELATION def[Rule * Meaning] IN ENGLISH LATEX {+ A rule is an expression on: relations with a single interpretation and single meaning in natural language; and relational operators with a single interpretation. Therefore a rule has a single meaning, which may be articulated in natural language. By documenting the meaning of the rule in natural language: the rule designer can verify the correctness of the translation from the formal rule; and stakeholders can agree upon the rule. This way the trace is documented from a rule agreed upon by stakeholders to the formal rule. -}
PURPOSE RELATION purpose[Rule * Purpose] IN ENGLISH LATEX {+ There is a reason why stakeholders agree upon a rule. There may be documents, discussions or other grounds. Documenting the reason why a rule exists and the process to get to that reason serves traceability and maintenance of a rule. -}
ENDCONTEXT
