CONTEXT RAP

PATTERN Contexts
 CONCEPT Architecture "A set of contexts owned by a legal entity that lives inside the repository isolated from other architectures." ""
 CONCEPT Pattern "A set of rules inside an architecture that represents a generic solution to a design problem. A pattern has a name and can be used within a context. Patterns can be inserted into or removed from an architecture." ""
 CONCEPT Context "A set of rules with power of law (within that context)."
""
 CONCEPT Rule "An statement in relational algebra that restricts the possible interpretations of relations used in the rule." ""
 CONCEPT Link "The combination of two atoms, one to the left and one to the right." ""
 CONCEPT Atom "Atomic object with one property only: it exists." ""
 CONCEPT Relation "A subset of the cartesian product of a concept called its source (i.e. the left attribute) and a concept called its target (i.e. the right attribute)." ""
 CONCEPT Concept "A set of atoms." ""

 definedIn :: Rule * Context [UNI,TOT] PRAGMA "" " is defined within ".
 definedIn :: Relation * Context [UNI,TOT] PRAGMA "Relation " " is defined in Context "  -- Relation 1
  = [ ("Relation 1",  "RAP")
    ; ("Relation 2",  "RAP")
    ; ("Relation 3",  "RAP")
    ; ("Relation 4",  "RAP")
    ; ("Relation 5",  "RAP")
    ; ("Relation 6",  "RAP")
    ; ("Relation 7",  "RAP")
    ; ("Relation 8",  "RAP")
    ; ("Relation 9",  "RAP")
    ; ("Relation 11", "RAP")
    ; ("Relation 12", "RAP")
    ; ("Relation 13", "RAP")
    ; ("Relation 14", "RAP")
    ; ("Relation 15", "RAP")
    ; ("Relation 16", "RAP")
    ].
 appliesIn :: Rule * Context PRAGMA "Rule " " applies in Context "  -- Relation 2
  = [ ("signature -: in ; FLP appliesIn ; uses", "RAP")
    ; ("appliesIn ; FLP extends -: appliesIn",   "RAP")
    ; ("scope = in ; extends",                   "RAP")
    ; ("in = FLP uses ; in",                     "RAP")
    ; ("in ; FLP useOf ; in -: appliesIn",       "RAP")
    ; ("in -: appliesIn",                        "RAP")
    ].
 appliesIn = definedIn \/ definedIn;FLP use
  EXPLANATION "The rules that apply in a context are the ones defined in that context and the ones declared in patterns used by that context."
 uses :: Rule * Morphism PRAGMA "Rule " " uses Morphism "  -- Relation 3
  = [ ("signature -: in ; FLP appliesIn ; uses",
"signature[Relation*Morphism]")
    ; ("signature -: in ; FLP appliesIn ; uses", "in[Relation*Context]")
    ; ("signature -: in ; FLP appliesIn ; uses", "appliesIn[Rule*Context]")
    ; ("signature -: in ; FLP appliesIn ; uses", "uses[Rule*Morphism]")
    ; ("appliesIn ; FLP extends -: appliesIn",   "appliesIn[Rule*Context]")
    ; ("appliesIn ; FLP extends -: appliesIn",   "extends[Context*Context]")
    ; ("scope = in ; extends",                   "scope[Relation*Context]")
    ; ("scope = in ; extends",                   "in[Relation*Context]")
    ; ("scope = in ; extends",                   "extends[Context*Context]")
    ; ("in = FLP uses ; in",                     "in[Morphism*Pattern]")
    ; ("in = FLP uses ; in",                     "uses[Rule*Morphism]")
    ; ("in = FLP uses ; in",                     "in[Rule*Pattern]")
    ; ("in ; FLP useOf ; in -: appliesIn",       "in[Rule*Pattern]")
    ; ("in ; FLP useOf ; in -: appliesIn",       "useOf[Pat*Pattern]")
    ; ("in ; FLP useOf ; in -: appliesIn",       "in[Pat*Context]")
    ; ("in ; FLP useOf ; in -: appliesIn",       "appliesIn[Rule*Context]")
    ; ("in -: appliesIn",                        "in[Rule*Context]")
    ; ("in -: appliesIn",                        "appliesIn[Rule*Context]")

    ].
 signature :: Relation * Morphism [UNI,TOT] PRAGMA "Relation " " is assigned Morphism " " as signature"  -- Relation 4
  = [ ("Empty relation", "extends[Context*Context]")
    ; ("Relation 1",     "in[Relation*Context]")
    ; ("Relation 2",     "appliesIn[Rule*Context]")
    ; ("Relation 3",     "uses[Rule*Morphism]")
    ; ("Relation 4",     "signature[Relation*Morphism]")
    ; ("Relation 5",     "scope[Relation*Context]")
    ; ("Relation 6",     "in[Rule*Pattern]")
    ; ("Relation 7",     "in[Morphism*Pattern]")
    ; ("Relation 8",     "in[Pat*Context]")
    ; ("Relation 9",     "useOf[Pat*Pattern]")
    ; ("Empty relation", "in[Rule*Context]")
    ; ("Relation 10",    "source[Morphism*Concept]")
    ; ("Relation 11",    "target[Morphism*Concept]")
    ; ("Empty relation", "left[Link*Atom]")
    ; ("Empty relation", "right[Link*Atom]")
    ; ("Empty relation", "type[Atom*Concept]")
    ; ("Empty relation", "in[Link*Relation]")
    ].
 extends :: Context * Context [ASY,RFX,TRN] PRAGMA "Context " " (specific) extends Context " " (generic)".
 appliesIn ; FLP extends -: appliesIn
  EXPLANATION "Every rule that applies in a generic context applies in the specific context as well."
 use :: Context * Pattern PRAGMA "Context " " uses Pattern ".
 extends :: Context * Context PRAGMA "Context " " extends Context ".
 scope :: Relation * Context PRAGMA "Relation " " is in scope of Context "
-- Relation 5
  = [ ("Empty relation", "RAP")
    ; ("Relation 1",     "RAP")
    ; ("Relation 2",     "RAP")
    ; ("Relation 3",     "RAP")
    ; ("Empty 4",        "RAP")
    ; ("Relation 5",     "RAP")
    ; ("Relation 6",     "RAP")
    ; ("Relation 7",     "RAP")
    ; ("Relation 8",     "RAP")
    ; ("Relation 9",     "RAP")
    ; ("Relation 11",    "RAP")
    ; ("Relation 12",    "RAP")
    ; ("Relation 13",    "RAP")
    ; ("Relation 14",    "RAP")
    ; ("Relation 15",    "RAP")
    ; ("Relation 16",    "RAP")
    ].
 scope = definedIn ; extends
  EXPLANATION "A relation is in scope of a context if it is defined in that context or in one of its more specific contexts."
 definedIn :: Rule * Pattern [UNI,TOT] PRAGMA "Rule " " is defined in Pattern "  -- Relation 6
  = [ ("signature -: in ; FLP appliesIn ; uses", "Contexts")
    ; ("appliesIn ; FLP extends -: appliesIn",   "Contexts")
    ; ("scope = in ; extends",                   "Contexts")
    ; ("in = FLP uses ; in",                     "Contexts")
    ; ("in ; FLP useOf ; in -: appliesIn",       "Contexts")
    ; ("in -: appliesIn",                        "Contexts")
    ].
 definedIn :: Morphism * Pattern [UNI,TOT] PRAGMA "Morphism " " is defined in Pattern "  -- Relation 7
  = [ ("extends[Context*Context]",    "Contexts")
    ; ("in[Relation*Context]",        "Contexts")
    ; ("appliesIn[Rule*Context]",     "Contexts")
    ; ("uses[Rule*Morphism]",         "Contexts")
    ; ("signature[Relation*Morphism]","Contexts")
    ; ("scope[Relation*Context]",     "Contexts")
    ; ("in[Rule*Pattern]",            "Contexts")
    ; ("in[Morphism*Pattern]",        "Contexts")
    ; ("in[Pat*Context]",             "Contexts")
    ; ("useOf[Pat*Pattern]",          "Contexts")
    ; ("in[Rule*Context]",            "Contexts")
    ; ("source[Morphism*Concept]",    "Contexts")
    ; ("target[Morphism*Concept]",    "Contexts")
    ; ("left[Atom*Link]",             "Contexts")
    ; ("right[Atom*Link]",            "Contexts")
    ; ("type[Atom*Concept]",          "Contexts")
    ; ("in[Link*Relation]",           "Contexts")
    ].
 definedIn = FLP uses ; definedIn
  EXPLANATION "A pattern defines all morphisms it uses in rules. In the current ADL compiler, this rule is not enforced. Consequently, you can use any morphism defined in this pattern's context and any morphism in any context which is more generic."
 in :: Pat * Context [UNI,TOT] PRAGMA "Pat " " is defined in Context "  -- Relation 8
  = [ ("Pat1","RAP")
    ].
 useOf :: Pat * Pattern [UNI,TOT] PRAGMA "Pat " " makes use of Pattern "  -- Relation 9
  = [ ("Pat1","Contexts")
    ].
ENDPATTERN

PATTERN Terms
 source :: Morphism * Concept [UNI,TOT] PRAGMA "Morphism " " has " " as source "  -- Relation 10
  = [ ("extends[Context*Context]",    "Context")
    ; ("in[Relation*Context]",        "Relation")
    ; ("appliesIn[Rule*Context]",     "Rule")
    ; ("uses[Rule*Morphism]",         "Rule")
    ; ("signature[Relation*Morphism]","Relation")
    ; ("scope[Relation*Context]",     "Relation")
    ; ("in[Rule*Pattern]",            "Rule")
    ; ("in[Morphism*Pattern]",        "Morphism")
    ; ("in[Pat*Context]",             "Pat")
    ; ("useOf[Pat*Pattern]",          "Pat")
    ; ("in[Rule*Context]",            "Rule")
    ; ("source[Morphism*Concept]",    "Morphism")
    ; ("target[Morphism*Concept]",    "Morphism")
    ; ("left[Link*Atom]",             "Link")
    ; ("right[Link*Atom]",            "Link")
    ; ("type[Atom*Concept]",          "Atom")
    ; ("in[Link*Relation]",           "Link")
    ].
 target :: Morphism * Concept [UNI,TOT] PRAGMA "Morphism " " has " " as target "  -- Relation 11
  = [ ("extends[Context*Context]",    "Context")
    ; ("in[Relation*Context]",        "Context")
    ; ("appliesIn[Rule*Context]",     "Context")
    ; ("uses[Rule*Morphism]",         "Morphism")
    ; ("signature[Relation*Morphism]","Morphism")
    ; ("scope[Relation*Context]",     "Context")
    ; ("in[Rule*Pattern]",            "Pattern")
    ; ("in[Morphism*Pattern]",        "Pattern")
    ; ("in[Pat*Context]",             "Context")
    ; ("useOf[Pat*Pattern]",          "Pattern")
    ; ("in[Rule*Context]",            "Context")
    ; ("source[Morphism*Concept]",    "Concept")
    ; ("target[Morphism*Concept]",    "Concept")
    ; ("left[Link*Atom]",             "Atom")
    ; ("right[Link*Atom]",            "Atom")
    ; ("type[Atom*Concept]",          "Concept")
    ; ("in[Link*Relation]",           "Relation")
    ].
 left :: Link * Atom [UNI,TOT] PRAGMA "Link " " has " " as its left Atom".
-- Empty Relation
 right :: Link * Atom [UNI,TOT] PRAGMA "Link " " has " " as its right Atom".
-- Empty Relation
 type :: Atom * Concept [UNI,TOT] PRAGMA "Atom " " is of type ".  -- Empty Relation
 source:: Relation*Concept [UNI,TOT].
 source = signature ; source
  EXPLANATION "The source of a relation is defined in its signature."
 target:: Relation*Concept [UNI,TOT].
 target = signature ; target
  EXPLANATION "The target of a relation is defined in its signature."
 name :: Relation * Identifier [UNI,TOT] PRAGMA "Relation " " has name ".
 ident :: Relation * Relation [UNI,TOT,SUR,INJ] PRAGMA "" " = ".
 name;FLP name /\ source;FLP source /\ target;FLP target -: ident[Relation]
  EXPLANATION "A relation's name, source and target identify it uniquely."
 elem :: Link * Relation.
 elem -: left ; type ; FLP source /\ right ; type ; FLP target
  EXPLANATION "A tuple in a relation matches the signature of that relation. That is: the left atom of a tuple is atom of the source of the relation in which that tuple resides. Idem for the target."
 bound :: Morph * Morphism [UNI,TOT] PRAGMA "Morph " " is bound to signature ".
 in :: Morph * Rule [UNI,TOT] PRAGMA "" " is part of ".
 bound -: in;appliesIn;FLP definedIn;signature EXPLANATION "Every Morph used in a rule of a particular pattern is bound to a signature in that pattern."
ENDPATTERN
ENDCONTEXT