CONTEXT History IN ENGLISH

PATTERN "historic records"
PURPOSE PROCESS "historic records"
{+Maintaining historic records of specific data is a recurring theme in database design.
This pattern defines history, such that it can be used in many situations by means of specialization.
-}

PURPOSE RELATION trace
{+In order to keep track of history, each variable points to a list of assignments.
This list may be empty.
If not empty, the list starts with the most recent assignment.
Its tail is a list that keeps track of the remaining history.
-}
PURPOSE RELATION pred
{+In order to keep track of history, each assignment may have a predecessor.
Without a predecessor, the assignment represents the oldest value ever assigned to a variable.
The successor relation needs no separate representation, because it is equal to pred~.
If an assignment has no successor, it represents the last (most recent) value assigned to a variable.
-}

RELATION trace[Variable*Assignment] [UNI] -- For the purpose of initializing a variable, `trace` may not be total.
RELATION pred[Assignment*Assignment] [UNI,INJ]

RULE -(trace;pred~)
MEANING "The trace of each variable starts with an assignment that has no successors."

RULE V[ONE*Assignment];pred \/ V[ONE*Variable];trace
MEANING "Every assignment either has a successor (which is an assignment) or it represents the current value of a variable."

--RULE pred*;pred |- pred*
--MEANING "The predecessor relation corresponds to its transitive closure."
ENDPATTERN

PROCESS "View Historic Records"
PURPOSE PROCESS "historic records"
{+Maintaining historic records of specific data is a recurring theme in database design.
This pattern is an attempt to define history, such that it can be used in many situations by means of specialization.
-}
VIEW Variable : Variable(name, TXT ",", trace;value)

PURPOSE RELATION name
{+In order to refer to a variable, it gets a name.
For the purpose of this pattern, which is to define a history mechanism, this is superfluous however.
In the context of use, one or more rules will be needed to ensure that every variable can be identified.
-}
PURPOSE RELATION value
{+If a historic record of a variable keeps track of changes, that presupposes that every variable has a value and that value can change as time passes by.
For the purpose of visualizing that behaviour, the system registers these values.
Every assignment is associated with one value, which represents the value of the variable until it is superseded by another assignment.
-}
PURPOSE RELATION var
{+In order to quickly select all assignments that are related to a variable,
we register the variable of each assignment.
-}
RELATION name[Variable*Name] [UNI,TOT]
RELATION value[Assignment*Value] [UNI,TOT]
RELATION var[Assignment*Variable] [UNI,TOT]
RULE var~;pred;var |- I
MEANING "Preceding assignments should refer to the same variable."

ROLE ExecEngine MAINTAINS keepVar

RULE keepVar : trace |- var~
MEANING "The trace of each variable starts with an assignment on that same variable."
VIOLATION (TXT "{EX} InsPair;var;Assignment;", TGT I, TXT ";Variable;", SRC I)
ENDPROCESS

{-
POPULATION name[Variable*Name] CONTAINS
  [("r1","Zwitserleven")]
POPULATION trace[Variable*Assignment] CONTAINS
  [("r1","t1")]
POPULATION current[Context*Variable] CONTAINS
  [("C","r1")]
POPULATION value[Assignment*Value] CONTAINS
  [("t1","4")]
POPULATION var[Assignment*Variable] CONTAINS
  [("t1","r1")]
-}

INTERFACE overview FOR user : I[SESSION]
BOX [ Variables : V[SESSION*Variable]
    , History : V[SESSION*Variable];var~
      BOX [ trace : I
          , variable : var
          , value : value
          , pred : pred
          ]
    ]

INTERFACE newvariable(name,var, pred, value) FOR user : I[Variable]
BOX [ name : name
    , trace : trace
      BOX [ assignment : I
          , variable : var
          , value : value
          , pred : pred
          ]
    ]

INTERFACE assign(trace, var, pred, value) FOR user : I[Assignment]
BOX [ Variable : trace~
    , Var : var
    , value : value
    , pred : pred
    ]

ENDCONTEXT