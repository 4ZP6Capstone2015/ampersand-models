CONTEXT History IN ENGLISH LATEX
PURPOSE PATTERN "Historic records"
{+Maintaining historic records of specific data is a recurring theme in database design.
This pattern defines historic records, such that they can be used in many situations by means of specialization.
-}

PURPOSE CONCEPT Variable
{+Let us use the word variable to denote something that stores an element of data.
Each historic record is kept in a variable.
The idea is that all changes in the past will be accessible at all times.
-}
CONCEPT Variable "A variable is a device in which one data element can be stored and the history of changes can be retrieved."

PURPOSE CONCEPT Assignment
{+Let us use the word assignment to denote a change made to a data element.
We assume that the most recent assignment represents the actual value of the variable.
The idea is to store all past assignments in temporal order.
-}
CONCEPT Assignment "An assignment is a change that has occured to a variable."

PURPOSE RELATION trace
{+In order to keep track of history, each variable points to a list of assignments.
This list may be empty.
If not empty, the list starts with the most recent assignment.
Its tail is a list that keeps track of the remaining history.
-}

PURPOSE RELATION pred LATEX
{+In order to keep track of history, each assignment may have a predecessor.
Without a predecessor, the assignment represents the oldest value ever assigned to a variable.
The successor relation needs no separate representation, because it is equal to $\flip{\id{pred}}$.
If an assignment has no successor, it represents the last (most recent) value assigned to a variable.
-}

PATTERN "Historic records"
RELATION trace[Variable*Assignment] [UNI,INJ] -- For the purpose of initializing a variable, `trace` may not be total.
RELATION pred[Assignment*Assignment] [UNI,INJ]

RULE -(trace;pred~)
MEANING "The trace of each variable starts with an assignment that has no successors."

RULE V[ONE*Assignment];pred \/ V[ONE*Variable];trace
MEANING "Every assignment either has a successor (which is an assignment) or it represents the current value of a variable."

--RULE pred*;pred |- pred*
--MEANING "The predecessor relation corresponds to its transitive closure."
ENDPATTERN

PURPOSE PROCESS "Demo History"
{+Maintaining historic records of specific data is a recurring theme in database design.
This pattern is an attempt to define history, such that it can be used in many situations by means of specialization.
-}

PURPOSE RELATION name
{+In order to refer to a variable, it gets a name.
For the purpose of this pattern, which is to define a history mechanism, this is superfluous however.
In the context of use, one or more rules will be needed to ensure that every variable can be identified.
-}

PURPOSE RELATION value
{+A historic record of a variable keeps track of the assignments in value of that variable.
This presumes a variable has a value.
For that purpuse, the value is registered in the system.
-}

PURPOSE RELATION var
{+In order to quickly select all assignments that are related to a variable,
we register the variable of each assignment.
-}

PROCESS "Demo History"
VIEW Variable : Variable(name, TXT " (value = '", trace;value, TXT "')")

RELATION name[Variable*Name] [UNI,TOT]
RELATION varvalue[Variable*Value] [UNI,TOT]
RELATION value[Assignment*Value] [UNI,TOT]
RELATION var[Assignment*Variable] [UNI,TOT]

RULE var~;pred;var |- I
MEANING "If one assignment precedes another, they affect the same variable."

ROLE ExecEngine MAINTAINS CreateTrace
RULE CreateTrace: (I /\ -(trace;trace~));varvalue |- trace;value
MEANING "Every variable must have a trace."
VIOLATION (TXT "{EX} NewStruct;Assignment" -- Create new atom of type Assignment
                ,TXT ";trace;Variable;", SRC I, TXT ";Assignment;NULL" -- Initialize relation 'trace' for this atom
                ,TXT ";var;Assignment;NULL;Variable;", SRC I           -- Initialize relation 'var' for this atom
                ,TXT ";value;Assignment;NULL;Value;", TGT I            -- Init relation 'value' for this atom
          )

ROLE ExecEngine MAINTAINS UpdateTrace
RULE UpdateTrace: (I /\ trace;trace~);varvalue |- trace;value
MEANING "The predecessor of a changed variable is its previous trace."
VIOLATION (TXT "{EX} NewStruct;Assignment" -- Create new atom of type Assignment
                ,TXT ";pred;Assignment;NULL;Assignment;", SRC trace
                ,TXT ";trace;Variable;", SRC I, TXT ";Assignment;NULL" -- Initialize relation 'trace' for this atom
                ,TXT ";var;Assignment;NULL;Variable;", SRC I           -- Initialize relation 'var' for this atom
                ,TXT ";value;Assignment;NULL;Value;", TGT I            -- Init relation 'value' for this atom
          )

ENDPROCESS

{-
POPULATION name[Variable*Name] CONTAINS
  [("r1","Zwitserleven")]
POPULATION trace[Variable*Assignment] CONTAINS
  [("r1","t1")]
POPULATION current[Context*Variable] CONTAINS
  [("C","r1")]
POPULATION value[Assignment*Value] CONTAINS
  [("t1","4")]
POPULATION var[Assignment*Variable] CONTAINS
  [("t1","r1")]
-}

INTERFACE overview FOR user : I[ONE]
BOX [ Variables : V[ONE*Variable]
    , History : V[ONE*Variable];var~
      BOX [ assignment : I
          , variable : var;name
          , value : value
          , pred : pred
          , status : (I /\ trace~;trace);V;'Current value'[TEXT] \/ (I /\ -(trace~;trace));V;'Archived value'[TEXT] 
          ]
    ]

INTERFACE Variable (name, varvalue) FOR user : I[Variable]
BOX [ name : name
    , varvalue: varvalue
    ]

ENDCONTEXT