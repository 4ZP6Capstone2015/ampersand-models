CONTEXT EURentDocumentation
-----------------------------------------------------------

PURPOSE RELATION branchOf REF "P1:1"
{+EU-Rent is a company that rents cars to persons, operating from geographically dispersed braches. Therefore, we must know what branches exist with EU-Rent.-}

PURPOSE RULE "EURent branches" REF "P2:3"
{+While our scope is limited to EU-Rent, we need to explicitly model it as a company in order to be able to define company policy that holds for all branches. An example of this would be the maximum rental period. -}

PURPOSE RELATION branchLocation REF "P1:1, P4:5"
{+EU-Rent operates from geographically dispersed braches. We need to know where such locations are in order to compute penalty charges for drivers that drop off their car at a location other than is contracted, because such charges depend on the distance between the actual and the contracted drop-off branch.-}

PURPOSE RELATION brand REF "P1:2a"
{+The cars of EU-Rent are divided in car types (brands and models)-}

PURPOSE RELATION model REF "P1:2a"
{+The cars of EU-Rent are divided in car types (brands and models)-}

PURPOSE RELATION rentalTariffPerDay REF "P1:2b"
{+For every car type there is a particular rental tariff per day.-}

PURPOSE CONTEXT EURent
{+P2:1 states: "A car may be rented by a reservation in advance or by a 'walk-in' customer on the day of renting". The Note on slide 10 says that there is no difference between these two. We will follow this idea so as not to digress too much from the case. The consequence of this is that making a reservation in advance does not mean that there is a higher chance that a car of the requested type will be available.-}

--? P2:2: A rental contract specifies the start and end dates of the rental, the car type one whishes, the branch where the rental starts (called the pickup branch), and the brach where the rental will end (called the drop-off branch).-}
PURPOSE RELATION rcStartDate REF "P2:2"
{+In order to compute the correct charge for renting a car, the start date must be known. Note that the meaning of this date depends on whether or not the rental has already started. If the rental has not yet started, it is the date that the rental is foreseen to start. If the rental has started, it is the date on which the rental actually started.-}

PURPOSE RELATION rcEndDate REF "P2:2"
{+In order to determine whether or not a penalty has to be paid for a late drop-off, the end date before which the car will be dropped off must be contractually administrated.-}

PURPOSE RELATION rcCarType REF "P2:2"
{+Since the daily charges depend on the car type, the contract must mention what type of car is (going to be) rented.-}

PURPOSE RELATION rcPickupBranch REF "P2:2"
{+-}

PURPOSE RELATION rcDropoffBranch REF "P2:2"
{+-}


--? P2:3: Rentals have a maximum duration. Slide 11 interprets this as: 'contracted end date' - 'contracted start date' =< 'max rental duration'. We follow this interpretation.-}
PURPOSE RELATION dateIntervalIsWithinMaxRentalDuration :: Date * Date
{+-}
MEANING "the date interval (SRC,TGT) is within the maximum rental duration as specified by EURent."

RULE "Enforcing maximum rental duration": rcStartDate~;rcEndDate |- dateIntervalIsWithinMaxRentalDuration
VIOLATION (TXT "The date interval [", SRC I, TXT " , ", TGT I, TXT "] exceeds the max. allowed rental duration.")

--? P3:1: The person who rents the car is called the renter.-}
PURPOSE RELATION rcRenter :: RentalContract * Person [UNI]
{+-}
MEANING "The person who rents the car is called the renter."

--? P3:2: The one who is going to drive is called the driver.-}
PURPOSE RELATION rcDriver :: RentalContract * Person [UNI]
{+-}
MEANING "The person who is going to drive is called the driver."

--? P3:3: A rental will only be started if the driver has a valid driving license. -}
PURPOSE RELATION validDrivingLicense :: Person * DrivingLicense
{+-}
MEANING "A person may have a valid driving license."

RULE "Qualified drivers": rcDriver |- rcDriver;(I /\ validDrivingLicense;validDrivingLicense~)
MEANING "The person mentioned as 'driver' in a rental contract must have a valid driving license."
VIOLATION (TXT "In order to start a rental, ", TGT I, TXT " must have a valid driving license.")

--? P3:4: In addition, a car of the requested type must be available.-}
PURPOSE RELATION carAvailableAt :: Car * Branch [UNI]
{+-}
MEANING "Cars may be available at a branch."
PURPOSE RELATION carType :: Car -> CarType
{+-}
MEANING "Every car is of a specific type (brand, model)."

RULE "Rentable cars": rcPickupBranch~;rcCarType |- carAvailableAt~;carType
MEANING "A rental may only start if a car of the requested type is available at the pick-up branch."
VIOLATION (TXT "A ", TGT I, TXT " is not available at ", SRC I)

PURPOSE RULE "Car accountability"
{+In order to ensure that no cars are lost 'administratively', every car must be accounted for.-}
RULE "Car accountability": I[Car] |- rcIssuedCar~;(rentalHasStarted /\ -rentalHasEnded);rcIssuedCar \/ carAvailableAt;carAvailableAt~
MEANING "All cars are either being rented, or in stock at one of the branches."
VIOLATION (TXT "Car ", SRC I, TXT " cannot be accounted for.")

PURPOSE RELATION rcKeysHandedOverQ
{+A rental starts when a driver has been handed the car keys. In order for the system to keep track of things, this (manual) action must be registered. Registration of this action presupposes that the information as registered in the rental contract is in accordance with reality, which the issuer of the keys must check. Note that when a rental is started, the car is no longer available for rent.-}
PURPOSE RELATION rcKeysHandedOverQ :: RentalContract * YesNo
MEANING "The branch has handed the car (keys) to the driver."

RULE "YesNo validity": I[YesNo] |- 'Yes' \/ 'No'
MEANING "A 'YesNo' variable may only take the values 'Yes' or 'No'."
MESSAGE "Please answer with 'Yes' or 'No'."

PURPOSE RELATION rcIssuedCar :: RentalContract * Car [UNI]
{+-}
MEANING "Rental contracts specify the car that is (to be) issued to the driver."

RULE "Rented car type integrity": rcIssuedCar |- rcCarType;carType~
MEANING "The type of a rented car must be the same as the type mentioned in the contract."

RULE "Keys must be handed over to driver": I /\ rcKeysHandedOverQ;'Yes';rcKeysHandedOverQ~ |- rcDriver;rcDriver~
MEANING "Keys can only be handed over if there is a driver."

PURPOSE RULE "Auto fill in renter in rental contract" --!DEZE STAAT IN DE SOURCE EN KAN HIER DUS WEG
{+When the keys are handed to the driver, and the renter is not specified, we may assume that the driver also fulfills the role of renter, and fill this in the contract.-}
RULE "Auto fill in renter in rental contract": I /\ rcKeysHandedOverQ;'Yes';rcKeysHandedOverQ~ |- rcRenter;rcRenter~
VIOLATION (TXT "{EX} InsPair;rcRenter;RentalContract;", SRC I, TXT ";Person;", TGT rcDriver)

PURPOSE RELATION rentalHasStarted :: RentalContract * RentalContract --$[PROP]
{+-}

RULE "Starting the rental":             -- Starting a rental requires that ..
   I[RentalContract]                    -- there is a rental contract that has ..
   /\ rcStartDate;rcStartDate~          -- 1) a projected start date
   /\ rcEndDate;rcEndDate~              -- 2) an projected end date
   /\ rcCarType;rcCarType~              -- 3) a projected car type 
   /\ rcPickupBranch;rcPickupBranch~    -- 4) a projected pick-up branch
   /\ rcDropoffBranch;rcDropoffBranch~  -- 5) a projected drop-off branch
   /\ rcIssuedCar;rcIssuedCar~          -- 8) a projected car (of correct type)
-- /\ rcDriver;rcDriver~                -- 7) a driver (with is implicit because of rule 'Keys must be handed over to driver')
-- /\ rcRenter;rcRenter~                -- 6) a renter (this is implicit because of rule 'Auto fill in renter in rental contract')
   /\ rcKeysHandedOverQ;'Yes';rcKeysHandedOverQ~        -- and the keys of the issued car been turned over
|- rentalHasStarted
MEANING "A rental starts when a car has been issued to the renter and hence is no longer available at the pickup branch."
VIOLATION (TXT "{EX} InsPair;rentalHasStarted;RentalContract;", SRC I, TXT ";RentalContract;", TGT I
          ,TXT "{EX} DelPair;carAvailableAt;Car;", SRC rcIssuedCar, TXT ";Branch;", TGT rcPickupBranch
          )

--? P4:1: As soon as the car of a rental has been dropped-off, the rental can be ended, after the incurred charge has been paid.-}
PURPOSE RELATION rcDroppedOffCar :: RentalContract * Car [UNI]
{+-}
MEANING "Rental contracts specify the car that is (to be) issued to the driver."

RULE "Returned car type integrity": rcDroppedOffCar |- rcIssuedCar
MEANING "The car that is returned must be the one that has been issued."

PURPOSE RELATION rcDroppedOffDate :: RentalContract * Date [UNI]
{+-}
MEANING "The rental car has been returned on a specific date."

PURPOSE RELATION rcDroppedOffBranch :: RentalContract * Branch [UNI]
{+-}
MEANING "The car has been returned to a branch."

PURPOSE RELATION rentalHasEnded ::RentalContract * RentalContract --$[PROP]
{+-}

RULE "Ending the rental":                            -- Ending a rental requires that ..
   I[RentalContract]                                 -- there is a rental contract
   /\ rentalHasStarted                               -- and the rental has started
   /\ rcDroppedOffCar;rcDroppedOffCar~               -- and a car has been returned
   /\ rcDroppedOffDate;rcDroppedOffDate~             -- and the date of return is known
   /\ rcDroppedOffBranch;rcDroppedOffBranch~         -- and the actual drop-off branch is known 
   /\ rentalIsPaidQ;'Yes';rentalIsPaidQ~             -- and the rental has been paid for
|- rentalHasEnded
VIOLATION (TXT "{EX} InsPair;rentalHasEnded;RentalContract;", SRC I, TXT ";RentalContract;", TGT I
          ,TXT "{EX} InsPair;carAvailableAt;Car;", SRC rcDroppedOffCar, TXT ";Branch;", TGT rcDroppedOffBranch
          )

--[Charging and billing]--
--? P4:2: This charge may consist of several elements.-}
PURPOSE RELATION rentalIsPaidQ :: RentalContract * YesNo
{+-}

PURPOSE RELATION rentalCharge :: RentalContract * Amount [UNI]
{+-}

RULE "Rental charge computation": (rentalBasicCharge;arg1~ /\ rentalPenaltyCharge;arg2~ /\ rentalLocationPenaltyCharge;arg3~);compRentalCharge |- rentalCharge
VIOLATION (TXT "{EX} InsPair;rentalCharge;RentalContract;", SRC I, TXT ";Amount;", TGT I)

--? P4:3: First, there is the basic charge (number of days times the tariff per day).-}
PURPOSE RELATION rentalPeriod :: RentalContract * Integer [UNI] -- Duration (in days) of rental period
{+-}

RULE "Rental period computation": (rcDroppedOffDate;brg1~ /\ rcStartDate;brg2~);compNrDays |- rentalPeriod
VIOLATION (TXT "{EX} InsPair;rentalPeriod;RentalContract;", SRC I, TXT ";Integer;", TGT I)

PURPOSE RELATION rentalBasicCharge :: RentalContract * Amount [UNI]
{+-}

RULE "Basic charge computation": (rentalPeriod;ctcNrOfDays~ /\ rcIssuedCar;carType;rentalTariffPerDay;ctcDailyAmount~);compTariffedCharge |- rentalBasicCharge
VIOLATION (TXT "{EX} InsPair;rentalBasicCharge;RentalContract;", SRC I, TXT ";Amount;", TGT I)

--? P4:4: Next, there may be a penalty charge for exceeding this duration (number of extra days times the late return penalty tariff).-}
PURPOSE RELATION rentalExcessPeriod :: RentalContract * Integer [UNI] -- Duration (in days) of excess of contracted rental period
{+-}

RULE "Excess period computation": (rcDroppedOffDate;lastDate~ /\ rcEndDate;firstDate~);compNrExcessDays |- rentalExcessPeriod
VIOLATION (TXT "{EX} InsPair;rentalExcessPeriod;RentalContract;", SRC I, TXT ";Integer;", TGT I)

PURPOSE RELATION excessTariffPerDay :: CarType -> Amount
{+-}
MEANING "All car types have a specified excess tariff (per day)"

PURPOSE RELATION rentalPenaltyCharge :: RentalContract * Amount [UNI]
{+-}

RULE "Excess charge computation": (rentalExcessPeriod;ctcNrOfDays~ /\ rcIssuedCar;carType;excessTariffPerDay;ctcDailyAmount~);compTariffedCharge |- rentalPenaltyCharge
VIOLATION (TXT "{EX} InsPair;rentalBasicCharge;RentalContract;", SRC I, TXT ";Amount;", TGT I)

--? P4:5: Lastly, a location penalty charge is added if the car has been dropped-off at abnother branch than agreed (this charge dependson the distance between the branches).-}
PURPOSE RELATION distbranch :: DistanceBetweenLocations * Branch [TOT]
{+-}
MEANING "A distance is computed relative to a branch."
PURPOSE RELATION distance   :: DistanceBetweenLocations -> Distance
{+-}
MEANING "There may be a distance between locations."
PURPOSE RELATION distpenalty :: DistanceBetweenLocations -> Amount
{+-}
MEANING "There is a (fixed) tariff for dropping off a car at another location."

RULE "Completeness of distance table": -I[Branch] |- distbranch~;distbranch
MEANING "For all combinations of (different) branches, the distance between them is known."

PURPOSE RELATION rentalLocationPenaltyCharge :: RentalContract * Amount [UNI]
{+-}

RULE "Location penalty computation": (rcDroppedOffBranch;distbranch~ /\ rcDropoffBranch;distbranch~);distpenalty |- rentalLocationPenaltyCharge
VIOLATION (TXT "{EX} InsPair;rentalLocationPenaltyCharge;RentalContract;", SRC I, TXT ";Amount;", TGT I)


-----------------------------------------------------------
ENDCONTEXT