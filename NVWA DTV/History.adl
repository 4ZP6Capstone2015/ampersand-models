CONTEXT History IN DUTCH LATEX
PURPOSE PATTERN "Historic records" IN ENGLISH
{+Maintaining historic records of specific data is a recurring theme in database design.
The pattern ``Historic records'' defines a notion of variable with history.
A variable can be adapted to a specific situation by means of specialization.
-}
PURPOSE PATTERN "Historic records" IN DUTCH
{+Historische registratie van specifieke gegevens is een terugkerend thema in database ontwerp.
Het pattern ``Historic records'' definieert het begrip Variabele inclusief een geschiedenis.
Een Variable kan met behulp van specializatie worden aangepast aan specifieke situaties.
-}

PURPOSE CONCEPT Variable IN ENGLISH
{+Let us use the word variable to denote something that stores an element of data.
Each historic record is kept in a variable.
The idea is that all changes in the past will be accessible at all times.
-}

PURPOSE CONCEPT Variable IN DUTCH
{+Laten we het woord Variable gebruiken voor een ding waarin we een gegevenselement kunnen opslaan.
Elke historische registratie wordt in een variabele bijgehouden.
De bedoeling is om alle veranderingen uit het verleden op ieder moment te kunnen inzien.
-}
--CONCEPT Variable "A variable is a device that is meant to contain data and its history of changes."
CONCEPT Variable "Een Variable is een container, waarin (\'e\'en of meer) gegevens inclusief hun geschiedenis in kunnen worden opgeslagen."

PURPOSE CONCEPT Mutation IN ENGLISH
{+Let us use the word mutation to denote a change made to a data element.
We assume that the most recent mutation represents the actual value of the variable.
The idea is to store all past mutations in temporal order.
-}
PURPOSE CONCEPT Mutation IN DUTCH
{+Laten we het woord Mutatie gebuiken om een verandering aan een gegevens-element weer te geven.
Neem aan dat de meest recente Mutatie de actuele waarde van de Variable weergeeft.
Alle Mutaties van deze Variable worden op tijdsvolgorde opgeslagen.-}
--CONCEPT Mutation "A mutation is a change that has occured to a variable."
CONCEPT Mutation "Een Mutatie is een verandering die in een Variable heeft plaatsgevonden."

PURPOSE RELATION trace IN ENGLISH
{+In order to keep track of history, each variable points to a list of mutations.
Consequently, we apply the usual recursive definition of lists:
A list is either empty, or it has a head (one element) and a tail (a list).
If the list is not empty, its head is the most recent mutation.
We say that the list ``starts with'' that mutation.
The tail is a list that contains the remaining history, i.e. all mutations that are older.
-}

PURPOSE RELATION trace IN DUTCH
{+Om de geschiedenis bij te houden, verwijst elke Variable naar een lijst van Mutaties.
Daarom passen we de gebruikelijke recursieve definitie van lijsten toe:
Een lijst is ofwel leeg, ofwel het heeft een kop (\'e\e'n element) en een staart (een lijst).
Als de lijst niet leeg is, representeert de kop de meest recente Mutatie.
We zeggen dan dat de lijst ``begint'' met die Mutatie.
De staart is een lijst die de resterende geschiedenis bevat, dus alle Mutaties die ouder zijn.-}

PURPOSE RELATION pred[Mutation*Mutation] IN ENGLISH
{+In order to keep track of history, the temporal order in which mutations have taken place must be registered.
If mutation $a$ is more recent than mutation $a'$, we say that $a$ has succeded $a'$ or (equivalently) $a'$ has preceded $a$.
So we need a relation, $\id{pred}$, that represents a temporal order between mutations.
The successor relation needs no separate representation, because it is equal to $\flip{\id{pred}}$.
-}

PURPOSE RELATION pred[Mutation*Mutation] IN DUTCH
{+Om de geschiedenis bij te houden moet de tijdvolgorde van Mutaties worden geregistreerd.
Als Mutatie $a$ recenter is dan Mutatie $a'$, zeggen we dat $a$ volgt op $a'$ of (gelijkwaardig daarmee) $a'$ gaat vooraf aan $a$.
Daarom hebben we een voorganger-relatie, $\id{pred}$, nodig die de tijdvolgorde tussen Mutaties weergeeft.
De opvolger-relatie heeft geen afzonderlijke representatie nodig, omdat dit de converse is van $\id{pred}$.
-}

PURPOSE RULE "head of trace" IN ENGLISH
{+If the head of a trace is the most recent mutation, there cannot be any mutations that are more recent.
Without a predecessor, the mutation represents the oldest value ever assigned to a variable.
If an mutation has no successor, it represents the last (most recent) value assigned to a variable.
We need a rule to state that each variable refers to the most recent mutation of a trace.
-}

PURPOSE RULE "head of trace" IN DUTCH
{+Als de head van een trace de meest recente Mutatie is, zijn er dus geen Mutaties van nog recentere datum.
Een Mutatie zonder voorganger verwijst naar de oudste waarde die ooit aan een Variable werd toegekend.
Als een Mutatie geen opvolger heeft, representeert deze de meest recente (en dus actuele) waarde van de Variable.
We hebben dan ook een regel nodig die zegt dat elke Variable naar de meest recente Mutatie van een trace verwijst. -}

PURPOSE RULE "attached mutations" IN ENGLISH
{+In order to detect any ``dangling'' mutations,
we require that mutations without a successor must be attached to a variable.
-}

PURPOSE RULE "attached mutations" IN DUTCH
{+Om ``bungelende'' Mutaties te detecteren wordt vereist dat Mutaties zonder opvolger aan een Variable worden gekoppeld.-}

PATTERN "Historic records"
RELATION trace[Variable*Mutation] [UNI] -- For the purpose of initializing a variable, `trace` must not be total.
--MEANING "A variable may be related to a mutation, referring to the most recent value of that variable."
MEANING "Een Variable heeft als actuele waarde de waarde van de mutatie waar trace naar verwijst."
RELATION pred[Mutation*Mutation] [UNI]
--MEANING "A mutation may be related to another mutation, referring to its immediate predecessor."
MEANING "Een Mutation verwijst naar zijn directe voorganger (in de tijd), indien die bestaat."

{- Pattern to use for all applications of History.adl
ROLE ExecEngine MAINTAINS TOTtrace
RULE TOTtrace : I[Variable] |- trace;trace~   -- substitute this for the rule that sets off a mutation.
VIOLATION ( TXT "{EX} NewStruct;Mutation"
          , TXT ";mutDatum;Mutation;_NEW;MutDatum;{php}date(DATE_ISO8601)"
          , TXT ";var;Mutation;_NEW;Variable;", SRC I[Variable]
          , TXT ";trace;Variable;", SRC I[Variable], TXT ";Mutation;_NEW"
          )
-}

RULE "head of trace" : -(trace;pred~)
--MEANING "The trace of each variable starts with a mutation that has no successors."
MEANING "De trace van een Variable begint met een Mutatie die geen opvolger heeft."

RULE "attached mutations" : V[ONE*Mutation];pred \/ V[ONE*Variable];trace
--MEANING "Every mutation either has a successor (which is a mutation) or it represents the current value of a variable."
MEANING "Elke Mutatie heeft ofwel een opvolger (zelf een Mutatie) of hij representeert de huidige waarde van de variabele."

--RULE "transitive pred" : pred*;pred |- pred*
--MEANING "The predecessor relation corresponds to its transitive closure."

RELATION deleted[Variable*Variable] [PROP]
MEANING "A variable may have the property of being deleted."

ENDPATTERN

PURPOSE CONCEPT Value
{+Let us use a concept called $\id{Value}$ to represent the type of values that are assigned to variables in the actual system.
-}
--CONCEPT Value "A value represents the contents of a variable."
CONCEPT Value "De Value representeert de inhoud van een Variable."

PURPOSE RELATION var IN ENGLISH
{+In order to quickly select all mutations that are related to a variable,
we register the variable of each mutation.
-}
PURPOSE RELATION var IN DUTCH
{+Om alle Mutaties van een Variable snel te kunnen selecteren, wordt deze Variable in elke Mutatie geregistreerd.
-}

PURPOSE RULE precedence IN ENGLISH
{+If the system registers the variable to which each mutation belongs,
we need a rule to say that two mutations refer to the same variable if they are related by precedence.
-}
PURPOSE RULE precedence IN DUTCH
{+Omdat het systeem registreert welke variabele bij elke mutatie hoort,
hebben we een regel nodig, die zegt dat twee mutaties die in de voorganger-relatie zitten naar dezelfde variabele moeten verwijzen.
-}

RELATION mutDatum[Mutation*MutDatum] [UNI,TOT]
REPRESENT MutDatum TYPE DATE

RELATION var[Mutation*Variable] [UNI,TOT]
--MEANING "Every mutation belongs to precisely one variable."
MEANING "Elke Mutatie behoort tot precies een variabele."

PURPOSE RULE assignVar IN ENGLISH
{+The relation var is kept up-to-date automatically, because of its auxiliary nature.
-}
PURPOSE RULE assignVar IN DUTCH
{+Omdat de relatie var een hulprelatie is, wordt deze automatisch actueel gehouden door de exec-engine.
-}
ROLE ExecEngine MAINTAINS assignVar
RULE assignVar : trace~ |- var
VIOLATION ( TXT "{EX} InsPair;var;Mutation;", SRC I[Mutation], TXT ";Variable;", TGT I[Variable])

RULE precedence : var~;pred;var |- I
--MEANING "If one mutation precedes another, they affect the same variable."
MEANING "Als een Mutatie vooraf gaat aan een andere, verijzen zij naar dezelfde variabele."

ENDCONTEXT