CONTEXT Sequence IN ENGLISH MARKDOWN

--[Items and Sequences]--

RELATION seqName[Sequence*SeqName] [UNI,TOT] REPRESENT SeqName TYPE ALPHANUMERIC -- A sequence must have a name.
RELATION seqFirstItem[Sequence*Item] [UNI] -- For the purpose of initializing a sequence, `seqFirstItem` may not be total.
RELATION seqLastItem[Sequence*Item] [UNI] -- For the purpose of initializing a sequence, `seqLastItem` may not be total.

RELATION itemName[Item*ItemName] [UNI] REPRESENT ItemName TYPE ALPHANUMERIC -- An item must have a name.
RELATION itemInSeq[Item*Sequence] [UNI,TOT]
RELATION nextItem[Item*Item] [UNI,INJ,IRF] -- an item may have a successor (not being itself)

RULE "seqFirstItems do not have a prev item" : -(seqFirstItem;nextItem~)
RULE "seqLastItems do not have a next item" : -(seqLastItem;nextItem)
RULE "Every non-empty sequence has a first and a last item": itemInSeq~;itemInSeq |- seqFirstItem;V;seqLastItem~

--[Creating items at the beginning or end of a Sequence]--
-- This is done by populating seqNewFirstItem resp. seqNewLastItem with an ItemName

RELATION seqNewFirstItem[Sequence*ItemName] [UNI]
ROLE ExecEngine MAINTAINS "Create a 'new first item' in an empty sequence"
RULE "Create a 'new first item' in an empty sequence": 
   (I-(itemInSeq~;itemInSeq));seqNewFirstItem |- seqFirstItem;itemName
   VIOLATION ( TXT "{EX} NewStruct;Item"
                 , TXT ";itemInSeq;Item;_NEW;Sequence;", SRC I
                 , TXT ";itemName;Item;_NEW;ItemName;", TGT I
                 , TXT ";seqFirstItem;Sequence;", SRC I, TXT ";Item;_NEW"
                 , TXT ";seqLastItem;Sequence;", SRC I, TXT ";Item;_NEW"
             , TXT "{EX} DelPair;seqNewFirstItem;Sequence;", SRC I, TXT ";ItemName;", TGT I
             )

ROLE ExecEngine MAINTAINS "Create a 'new first item' in a non-empty sequence"
RULE "Create a 'new first item' in a non-empty sequence":
   (I /\ itemInSeq~;itemInSeq);seqNewFirstItem |- seqFirstItem;itemName
   VIOLATION ( TXT "{EX} NewStruct;Item"
                 , TXT ";itemInSeq;Item;_NEW;Sequence;", SRC I
                 , TXT ";itemName;Item;_NEW;ItemName;", TGT I
                 , TXT ";nextItem;Item;_NEW;Item;", SRC seqFirstItem
                 , TXT ";seqFirstItem;Sequence;", SRC I, TXT ";Item;_NEW"
             , TXT "{EX} DelPair;seqNewFirstItem;Sequence;", SRC I, TXT ";ItemName;", TGT I
             )

RELATION seqNewLastItem[Sequence*ItemName] [UNI]
ROLE ExecEngine MAINTAINS "Create a 'new last item' in an empty sequence"
RULE "Create a 'new last item' in an empty sequence": 
   (I-(itemInSeq~;itemInSeq));seqNewLastItem |- seqLastItem;itemName
   VIOLATION ( TXT "{EX} NewStruct;Item"
                 , TXT ";itemInSeq;Item;_NEW;Sequence;", SRC I
                 , TXT ";itemName;Item;_NEW;ItemName;", TGT I
                 , TXT ";seqFirstItem;Sequence;", SRC I, TXT ";Item;_NEW"
                 , TXT ";seqLastItem;Sequence;", SRC I, TXT ";Item;_NEW"
             , TXT "{EX} DelPair;seqNewLastItem;Sequence;", SRC I, TXT ";ItemName;", TGT I
             )

ROLE ExecEngine MAINTAINS "Create a 'new last item' in a non-empty sequence"
RULE "Create a 'new last item' in a non-empty sequence":
   (I /\ itemInSeq~;itemInSeq);seqNewLastItem |- seqLastItem;itemName
   VIOLATION ( TXT "{EX} NewStruct;Item"
                 , TXT ";itemInSeq;Item;_NEW;Sequence;", SRC I
                 , TXT ";itemName;Item;_NEW;ItemName;", TGT I
                 , TXT ";nextItem;Item;", SRC seqLastItem, TXT ";Item;_NEW"
                 , TXT ";seqLastItem;Sequence;", SRC I, TXT ";Item;_NEW"
             , TXT "{EX} DelPair;seqNewLastItem;Sequence;", SRC I, TXT ";ItemName;", TGT I
             )

--[Deleting items from a Sequence]--
-- This is done by depopulating `itemInSeq` for the item to be deleted.
-- Or by populating the `itemDelReq` property for that item

itemDelReq :: Item * Item [PROP]

ROLE ExecEngine MAINTAINS "Deleting an item in the middle of a sequence"
RULE "Deleting an item in the middle of a sequence": -- Done by depopulating its `itemInSeq` link.
   nextItem~;itemInSeq /\ -seqFirstItem~ /\ -seqLastItem~ |- (I-itemDelReq);itemInSeq 
   VIOLATION ( TXT "{EX} InsPair;nextItem;Item;", SRC nextItem~, TXT ";Item;", SRC nextItem
             , TXT "{EX} DelAtom;Item;", SRC I[Item]
            )

ROLE ExecEngine MAINTAINS "Deleting a last item of a sequence (not being the first item as well)"
RULE "Deleting a last item of a sequence (not being the first item as well)": -- Done by depopulating its `itemInSeq` link.
   seqLastItem~ /\ nextItem~;itemInSeq |- (I-itemDelReq);itemInSeq
   VIOLATION ( TXT "{EX} DelPair;nextItem;Item;", SRC nextItem~, TXT ";Item;", SRC I[Item]
             , TXT "{EX} InsPair;seqLastItem;Sequence;", TGT I, TXT ";Item;", SRC nextItem~
             , TXT "{EX} DelAtom;Item;", SRC I[Item]
             )

ROLE ExecEngine MAINTAINS "Deleting a first item of a sequence (not being the last item as well)"
RULE "Deleting a first item of a sequence (not being the last item as well)": -- Done by depopulating its `itemInSeq` link.
  seqFirstItem~ /\ nextItem;itemInSeq |- (I-itemDelReq);itemInSeq
  VIOLATION ( TXT "{EX} InsPair;seqFirstItem;Sequence;", TGT I[Sequence], TXT ";Item;", SRC nextItem
            , TXT "{EX} DelAtom;Item;", SRC I[Item]
            )

ROLE ExecEngine MAINTAINS "Deleting an item that is both the first and last item of a sequence"
RULE "Deleting an item that is both the first and last item of a sequence": -- Done by depopulating its `itemInSeq` link.
  (seqFirstItem /\ seqLastItem)~ |- (I-itemDelReq);itemInSeq
  VIOLATION ( TXT "{EX} DelAtom;Item;", SRC I[Item]) -- Note: this automatically depopulates `seqFirstItem` and `seqLastItem`

{---[**Testing**]----------------------------------------------

INCLUDE "../SIAM/SIAM_LoginStub.adl"

sessionNewSeq :: SESSION * SeqName
ROLE ExecEngine MAINTAINS "Create new Sequence"
RULE "Create new Sequence": sessionNewSeq |- -V
   VIOLATION ( TXT "{EX} NewStruct;Sequence;seqName;Sequence;_NEW;SeqName;", TGT I
             , TXT "{EX} DelPair;sessionNewSeq;SESSION;", SRC I, TXT ";SeqName;", TGT I
             )

POPULATION seqName CONTAINS [ ("TestSeq", "TestSeq") ]

VIEW Sequences: Sequence(seqName)
VIEW Items: Item(itemName)
REPRESENT CharSequence TYPE ALPHANUMERIC

INTERFACE Overview 
    (sessionNewSeq, seqName
    ,seqNewFirstItem, seqNewLastItem
    ,itemDelReq, itemInSeq 
    ) :  '_SESSION' CRUD ROWS
    [ "New sequence:" : sessionNewSeq
    , "Sequences" : V[SESSION*Sequence] BOX <COLSNL>
       [ "Sequence" : I BOX <ROWSNL>
          [ "1"        : V;'SeqName'[CharSequence]
          , "SeqName"  : seqName
          , "2"        : V;'New First item'[CharSequence]
          , "NewFirst" : seqNewFirstItem
          , "3"        : V;'New Last item'[CharSequence]
          , "NewLast"  : seqNewLastItem
          ]
       , "ItemList" : itemInSeq~ COLS
          [ "Pred"   : nextItem~
          , "Item"   : I
          , "Next"   : nextItem
          , "Del?"   : itemDelReq
          ]
       ]
    ]
-}

{- If the need arises, it can be useful to **compute closures of nextItem**

    RELATION succStar[Item*Item] -- Transitive, reflexive closure of nextItem, aka nextItem*
    MEANING "`succStar` is the reflexive, transitive closure of `nextItem`."
    RELATION succPlus[Item*Item] -- Transitive closure of nextItem, aka nextItem+
--  MEANING "`succPlus` is the transitive closure of `nextItem`."

    RELATION succCopy[Item*Item] -- necessary only for calling the Transitive closure function.
    ROLE ExecEngine MAINTAINS "Compute transitive closure of nextItem"
    RULE "Compute transitive closure of nextItem" : nextItem = succCopy
    VIOLATION (TXT "{EX} TransitiveClosure;nextItem;Item;succCopy;succPlus")

    ROLE ExecEngine MAINTAINS "Compute transitive closure of nextItem by Ins", "Compute transitive closure of nextItem by Del"
    RULE "Compute transitive closure of nextItem by Ins" : succPlus\/I |- succStar
    VIOLATION (TXT "{EX} InsPair;succStar;Item;", SRC I, TXT ";Item;", TGT I)
    RULE "Compute transitive closure of nextItem by Del" : succStar |- succPlus\/I
    VIOLATION (TXT "{EX} DelPair;succStar;Item;", SRC I, TXT ";Item;", TGT I)
-}
ENDCONTEXT