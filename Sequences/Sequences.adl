CONTEXT Sequences IN ENGLISH MARKDOWN
PURPOSE CONTEXT Sequences
{+This script defines the basic constraints for sequences. A 'graphical' view of such sequences is presented in the below figure:

-------------------------------------------------------------
|     Item     |     Item     |     Item     |     Item     |
-------------------------------------------------------------
 ^        ‼-nextItem-^   ‼-nextItem-^   ‼-nextItem-^      ^
 |                                                        |
 First Item of the sequence                       Last Item

In words: 
- A sequence is a set of items that are linked together with the `nextItem` relation:
  * For every pair (i1,i2) in `nextItem`, we say that i2 is the successor of i1
  * For every pair (i1,i2) in `nextItem`, we say that i1 is the predecessor of i2
- The item that has no predecessor is called the first item in the sequence.
- The item that has no successor is called the last item in the sequence.
- A sequence may be empty (i.e.: have no items), in which case is does not have a first nor a last item.

In our design, we have chosen to use Items that belong to precisely one sequence. If an item were allowed to be part of multiple sequences, it might also have multiple successors and/or predecessors, depending on the sequences it is an element of. This would make the handling of (items) in a sequence much more difficult.

Our definitions of `Sequence` and `Item` differ from what is traditionally used in computer science (see e.g. section 7.2 of Gordon J. Pace, "Mathematics of Discrete structures for Computer Science", Springer, 2012, ISBN 9783642298394). Computer science says that:
- The 'head' of a sequence is defined as what we call the first item of the sequence;
- The 'tail' of a sequence is the sequence without its first item, for which we do not have a representation;
- Items are numbered (sequentially), starting at the head, which is item 0 (per definition).
-}

--[Items and Sequences]--

RELATION seqName[Sequence*SeqName] [UNI,TOT] REPRESENT SeqName TYPE ALPHANUMERIC -- A sequence must have a name.
RELATION seqFirstItem[Sequence*Item] [UNI] -- For the purpose of initializing a sequence, `seqFirstItem` may not be total.
RELATION seqLastItem[Sequence*Item] [UNI] -- For the purpose of initializing a sequence, `seqLastItem` may not be total.

RELATION itemName[Item*ItemName] [UNI] REPRESENT ItemName TYPE ALPHANUMERIC -- An item must have a name.
RELATION itemInSeq[Item*Sequence] [UNI,TOT] -- depopulating this relation will delete the item (see rules below)
RELATION nextItem[Item*Item] [UNI,INJ,IRF] -- an item may have a successor (not being itself)

RULE "The first item of a sequence has no predecessor": -(seqFirstItem;nextItem~)
RULE "The last item of a seqeunce has no successor": -(seqLastItem;nextItem)
RULE "A non-empty sequence has a first item and a last item": itemInSeq~;itemInSeq |- seqFirstItem;V;seqLastItem~
RULE "Successors/predecessors are part of a single sequence": nextItem |- itemInSeq;itemInSeq~

ROLE ExecEngine MAINTAINS "Set first Item of Sequence"
RULE "Set first Item of Sequence": itemInSeq-(nextItem~;itemInSeq) |- seqFirstItem~
VIOLATION (TXT "{EX} InsPair;seqFirstItem;Sequence;", TGT I, TXT ";Item;", SRC I)

ROLE ExecEngine MAINTAINS "Set last Item of Sequence"
RULE "Set last Item of Sequence": itemInSeq-(nextItem;itemInSeq) |- seqLastItem~
VIOLATION (TXT "{EX} InsPair;seqLastItem;Sequence;", TGT I, TXT ";Item;", SRC I)

-- Note: there is no need for a rule that clears the `seqFirstItem` or `seqLastItem` in case the last item is deleted from a sequence, because in that case all links/pairs that it is part of, are deleted as well, thus clearing `seqFirstItem` and `seqLastItem`.

--[Option: Transitive Closures for `nextItem`]--
{- 
    RELATION succStar[Item*Item] -- Transitive, reflexive closure of nextItem, aka nextItem*
    MEANING "`succStar` is the reflexive, transitive closure of `nextItem`."
    RELATION succPlus[Item*Item] -- Transitive closure of nextItem, aka nextItem+
--  MEANING "`succPlus` is the transitive closure of `nextItem`."

    RELATION succCopy[Item*Item] -- necessary only for calling the Transitive closure function.
    ROLE ExecEngine MAINTAINS "Compute transitive closure of nextItem"
    RULE "Compute transitive closure of nextItem" : nextItem = succCopy
    VIOLATION (TXT "{EX} TransitiveClosure;nextItem;Item;succCopy;succPlus")

    ROLE ExecEngine MAINTAINS "Compute transitive closure of nextItem by Ins", "Compute transitive closure of nextItem by Del"
    RULE "Compute transitive closure of nextItem by Ins" : succPlus\/I |- succStar
    VIOLATION (TXT "{EX} InsPair;succStar;Item;", SRC I, TXT ";Item;", TGT I)
    RULE "Compute transitive closure of nextItem by Del" : succStar |- succPlus\/I
    VIOLATION (TXT "{EX} DelPair;succStar;Item;", SRC I, TXT ";Item;", TGT I)
-}

--[Interfacing rules]--
{- This section contains relations and rules that are to be used in interface-contexts 
for the creation of items at the beginning or end of Sequences:
* Create an item at the beginning of a sequence is done by populating `seqNewFirstItem` with the name of the new Item;
* Create an item at the beginning of a sequence is done by populating `seqNewLastItem` with the name of the new Item;
* Delete an item (anywhere in the sequence) is done either by
  * depopulating `itemInSeq` for that item, or
  * by populating the `itemDelReq` property for that item.
  
In order to support the situation in which both seqNewFirstItem and seqNewLastItem are handled for an empty sequence in a single transaction, and since we cannot predict the order in which they will be handled by the ExecEngine, it is necessary to have both rules
* "Create a 'new first item' in an empty sequence" and
* "Create a 'new last item' in an empty sequence"
-}

RELATION seqNewFirstItem[Sequence*ItemName] [UNI]
RELATION seqNewLastItem[Sequence*ItemName] [UNI]
RELATION itemDelReq[Item*Item] [PROP]

ROLE ExecEngine MAINTAINS "Create a 'new first item' in an empty sequence"
RULE "Create a 'new first item' in an empty sequence": 
   (I-(itemInSeq~;itemInSeq));seqNewFirstItem |- seqFirstItem;itemName
   VIOLATION ( TXT "{EX} NewStruct;Item"
                 , TXT ";itemInSeq;Item;_NEW;Sequence;", SRC I
                 , TXT ";itemName;Item;_NEW;ItemName;", TGT I
             , TXT "{EX} DelPair;seqNewFirstItem;Sequence;", SRC I, TXT ";ItemName;", TGT I
             )

ROLE ExecEngine MAINTAINS "Create a 'new first item' in a non-empty sequence"
RULE "Create a 'new first item' in a non-empty sequence":
   (I /\ itemInSeq~;itemInSeq);seqNewFirstItem |- seqFirstItem;itemName
   VIOLATION ( TXT "{EX} NewStruct;Item"
                 , TXT ";itemInSeq;Item;_NEW;Sequence;", SRC I
                 , TXT ";itemName;Item;_NEW;ItemName;", TGT I
                 , TXT ";nextItem;Item;_NEW;Item;", SRC seqFirstItem
             , TXT "{EX} DelPair;seqNewFirstItem;Sequence;", SRC I, TXT ";ItemName;", TGT I
             )

ROLE ExecEngine MAINTAINS "Create a 'new last item' in an empty sequence"
RULE "Create a 'new last item' in an empty sequence": 
   (I-(itemInSeq~;itemInSeq));seqNewLastItem |- seqLastItem;itemName
   VIOLATION ( TXT "{EX} NewStruct;Item"
                 , TXT ";itemInSeq;Item;_NEW;Sequence;", SRC I
                 , TXT ";itemName;Item;_NEW;ItemName;", TGT I
             , TXT "{EX} DelPair;seqNewLastItem;Sequence;", SRC I, TXT ";ItemName;", TGT I
             )

ROLE ExecEngine MAINTAINS "Create a 'new last item' in a non-empty sequence"
RULE "Create a 'new last item' in a non-empty sequence":
   (I /\ itemInSeq~;itemInSeq);seqNewLastItem |- seqLastItem;itemName
   VIOLATION ( TXT "{EX} NewStruct;Item"
                 , TXT ";itemInSeq;Item;_NEW;Sequence;", SRC I
                 , TXT ";itemName;Item;_NEW;ItemName;", TGT I
                 , TXT ";nextItem;Item;", SRC seqLastItem, TXT ";Item;_NEW"
             , TXT "{EX} DelPair;seqNewLastItem;Sequence;", SRC I, TXT ";ItemName;", TGT I
             )

ROLE ExecEngine MAINTAINS "Deleting a non-first item of a sequence"
RULE "Deleting a non-first item of a sequence": -- Done by depopulating its `itemInSeq` link.
   nextItem~;itemInSeq |- (I-itemDelReq);itemInSeq 
   VIOLATION ( TXT "{EX} InsPair;nextItem;Item;", SRC nextItem~, TXT ";Item;", SRC nextItem
             , TXT "{EX} DelAtom;Item;", SRC I[Item]
            )

ROLE ExecEngine MAINTAINS "Deleting the first item of a sequence"
RULE "Deleting the first item of a sequence": -- Done by depopulating its `itemInSeq` link.
  seqFirstItem~ |- (I-itemDelReq);itemInSeq
  VIOLATION (TXT "{EX} DelAtom;Item;", SRC I[Item])

ENDCONTEXT